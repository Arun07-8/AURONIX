<%- include("../../views/partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Profile</title>
     <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/userside-css/userside-css/profile.css" rel="stylesheet" type="text/css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
</head>
<body class="profile-page-container">
    <div class="page-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="profile-sidebar-col">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h5>Hello <%= user.name %></h5>
                            <p>Welcome to your Account</p>
                        </div>
                        <nav class="sidebar-menu">
                            <a class="nav-link active" href="/profile"><i class="far fa-user"></i>My Info</a>
                            <a class="nav-link" href="/address"><i class="fas fa-map-marker-alt"></i>Addresses</a>
                            <a class="nav-link" href="/view-order"><i class="fas fa-box"></i>My Orders</a>
                            <a class="nav-link" href="/wallet"><i class="fas fa-wallet"></i>Wallet</a>
                            <a class="nav-link" href="/referral"><i class="fas fa-gift"></i>Refer and Earn</a>
                            <a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt"></i>Sign Out</a>
                        </nav>
                    </div>
                </div>
                <!-- Main Content -->
                <div class="profile-main-content-col">
                    <div class="main-content">
                        <div class="content-header">
                            <h2>My Profile</h2>
                            <p>Manage your personal information and account settings</p>
                        </div>
                        <div class="profile-content">
                            <div class="row justify-content-center h-100">
                                <div class="col-12 d-flex flex-column h-100">
                                    <div class="profile-image-section">
                                        <div class="current-avatar" id="currentAvatar">
                                            <% if (user.profileImage && user.profileImage[0]) { %>
                                                <img id="profileImage" src="<%= user.profileImage[0] %>" alt="Profile Picture" class="profile-img" style="display: block;">
                                                <i class="far fa-user" id="defaultIcon" style="display: none;"></i>
                                            <% } else { %>
                                                <img id="profileImage" alt="Profile Picture" class="profile-img" style="display: none;">
                                                <i class="far fa-user" id="defaultIcon" style="display: block;"></i>
                                            <% } %>
                                        </div>
                                    </div>
                                    <div class="profile-info flex-fill">
                                        <div class="info-card">
                                           
                                            <div class="info-group">
                                                <div class="info-label">Full Name</div>
                                                <div class="info-value">
                                                    <input type="text" class="info-input readonly" value="<%= user.name %>" readonly>
                                                </div>
                                            </div>
                                            <div class="divider"></div>
                                            <div class="info-group">
                                                <div class="info-label">Phone Number</div>
                                                <div class="info-value">
                                                    <input type="tel" class="info-input na" value="<%= user.phoneNumber || 'N/A' %>" readonly>
                                                </div>
                                            </div>
                                            <a href="/editprofile" style="text-decoration: none; color: white;">
                                                <button class="edit-btn">
                                                    <i class="fas fa-edit me-2"></i>
                                                    Edit Profile
                                                </button>
                                            </a>
                                            <div class="divider"></div>
                                            <div class="info-group">
                                                <div class="info-label">Email Address</div>
                                                <div class="info-value">
                                                    <input type="email" class="info-input readonly" value="<%= user.email %>" readonly>
                                                    <% if (!user.googleid) { %>
                                                        <button class="change-btn" id="changeEmailBtn">Change</button>
                                                    <% } %>
                                                </div>
                                            </div>
                                            <div class="divider"></div>
                                            <div class="info-group">
                                                <div class="info-label">Password</div>
                                                <div class="info-value">
                                                    <input type="password" class="info-input readonly" value="********" readonly>
                                                    <% if (!user.googleid) { %>
                                                        <button class="change-btn" id="changePasswordBtn">Change</button>
                                                    <% } %>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Email Change Modal -->
    <div class="modal" id="emailModal">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="modal-close" id="closeEmailModal">
                    <i class="fas fa-times"></i>
                </button>
                <h3>Change Email</h3>
                <div class="subtitle">Update your email address</div>
            </div>
            <div class="modal-body">
                <div class="success-message" id="emailSuccessMessage"></div>
                <div class="error-message" id="emailErrorMessage"></div>
                <form id="emailChangeForm">
                    <div class="form-group">
                        <label class="form-label" for="newEmail">New Email</label>
                        <input type="text" class="form-input" id="newEmail" name="newEmail" placeholder="Enter new email address">
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="currentPasswordEmail">Current Password</label>
                        <div class="input-wrapper">
                            <span class="toggle-password" data-target="currentPasswordEmail">
                                <i class="fas fa-eye"></i>
                            </span>
                            <input type="password" class="form-input" id="currentPasswordEmail" name="currentPassword" placeholder="Enter your current password">
                        </div>
                    </div>
                    <button type="submit" class="submit-btn" id="submitEmailBtn">
                        Update Email
                    </button>
                </form>
            </div>
        </div>
    </div>
    <!-- Password Change Modal -->
    <div class="modal" id="passwordModal">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="modal-close" id="closePasswordModal">
                    <i class="fas fa-times"></i>
                </button>
                <h3>Change Password</h3>
                <div class="subtitle">Update your password</div>
            </div>
            <div class="modal-body">
                <div class="success-message" id="passwordSuccessMessage"></div>
                <div class="error-message" id="passwordErrorMessage"></div>
                <form id="passwordChangeForm">
                    <div class="form-group">
                        <label class="form-label" for="currentPassword">Current Password</label>
                        <div class="input-wrapper">
                            <span class="toggle-password" data-target="currentPassword">
                                <i class="fas fa-eye"></i>
                            </span>
                            <input type="password" class="form-input" id="currentPassword" name="currentPassword" placeholder="Enter your current password" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="newPassword">New Password</label>
                        <div class="input-wrapper">
                            <span class="toggle-password" data-target="newPassword">
                                <i class="fas fa-eye"></i>
                            </span>
                            <input type="password" class="form-input" id="newPassword" name="newPassword" placeholder="Enter new password" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label" for="confirmPassword">Confirm Password</label>
                        <div class="input-wrapper">
                            <span class="toggle-password" data-target="confirmPassword">
                                <i class="fas fa-eye"></i>
                            </span>
                            <input type="password" class="form-input" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" required>
                        </div>
                    </div>
                    <button type="submit" class="submit-btn" id="submitPasswordBtn">
                        Update Password
                    </button>
                </form>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
        // Toggle Password Visibility
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        // Modal Elements
        const emailModal = document.getElementById('emailModal');
        const changeEmailBtn = document.getElementById('changeEmailBtn');
        const closeEmailModal = document.getElementById('closeEmailModal');
        const emailChangeForm = document.getElementById('emailChangeForm');
        const submitEmailBtn = document.getElementById('submitEmailBtn');
        const emailSuccessMessage = document.getElementById('emailSuccessMessage');
        const emailErrorMessage = document.getElementById('emailErrorMessage');
        const newEmailInput = document.getElementById('newEmail');
        const currentPasswordEmailInput = document.getElementById('currentPasswordEmail');
        const passwordModal = document.getElementById('passwordModal');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const closePasswordModal = document.getElementById('closePasswordModal');
        const passwordChangeForm = document.getElementById('passwordChangeForm');
        const submitPasswordBtn = document.getElementById('submitPasswordBtn');
        const passwordSuccessMessage = document.getElementById('passwordSuccessMessage');
        const passwordErrorMessage = document.getElementById('passwordErrorMessage');
        const currentPasswordInput = document.getElementById('currentPassword');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');

        // Modal Functions
        function openModal(modal, focusInput) {
            modal.classList.add('show');
            document.body.style.overflow = 'hidden';
            setTimeout(() => focusInput.focus(), 300);
        }

        function closeModal(modal, form, inputs) {
            modal.classList.remove('show');
            document.body.style.overflow = '';
            form.reset();
            inputs.forEach(input => input.classList.remove('invalid'));
            hideMessages(modal);
        }

        function showSuccess(modal, message, successElement) {
            successElement.textContent = message;
            successElement.style.display = 'block';
            modal.querySelector('.error-message').style.display = 'none';
        }

        function showError(modal, message, errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            modal.querySelector('.success-message').style.display = 'none';
        }

        function hideMessages(modal) {
            modal.querySelector('.success-message').style.display = 'none';
            modal.querySelector('.error-message').style.display = 'none';
        }

        // Email Form Validation
        function validateEmailForm() {
            let isValid = true;
            const email = newEmailInput.value.trim();
            const password = currentPasswordEmailInput.value.trim();
            newEmailInput.classList.remove('invalid');
            currentPasswordEmailInput.classList.remove('invalid');
            hideMessages(emailModal);

            if (!email) {
                newEmailInput.classList.add('invalid');
                showError(emailModal, 'Email cannot be empty', emailErrorMessage);
                isValid = false;
            } else if (!/^[a-zA-Z][a-zA-Z0-9._%+-]*@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)) {
                 newEmailInput.classList.add('invalid');
                    showError(emailModal, 'Please enter a valid email address starting with a letter (e.g., user@example.com)', emailErrorMessage);
                     isValid = false;
                 }
                 else if (email === '<%= user.email %>') {
                newEmailInput.classList.add('invalid');
                showError(emailModal, 'New email must be different from the current email', emailErrorMessage);
                isValid = false;
            }

            if (!password) {
                currentPasswordEmailInput.classList.add('invalid');
                showError(emailModal, 'Password cannot be empty', emailErrorMessage);
                isValid = false;
            }

            return isValid;
        }

        // Password Form Validation
        function validatePasswordForm() {
            let isValid = true;
            const currentPassword = currentPasswordInput.value.trim();
            const newPassword = newPasswordInput.value.trim();
            const confirmPassword = confirmPasswordInput.value.trim();
            currentPasswordInput.classList.remove('invalid');
            newPasswordInput.classList.remove('invalid');
            confirmPasswordInput.classList.remove('invalid');
            hideMessages(passwordModal);

            if (!currentPassword) {
                currentPasswordInput.classList.add('invalid');
                showError(passwordModal, 'Current password cannot be empty', passwordErrorMessage);
                isValid = false;
            }

            if (!newPassword) {
                newPasswordInput.classList.add('invalid');
                showError(passwordModal, 'New password cannot be empty', passwordErrorMessage);
                isValid = false;
            } else if (newPassword.length < 8) {
                newPasswordInput.classList.add('invalid');
                showError(passwordModal, 'New password must be at least 8 characters long', passwordErrorMessage);
                isValid = false;
            } else if (!/[0-9]/.test(newPassword)) {
                newPasswordInput.classList.add('invalid');
                showError(passwordModal, 'New password must contain at least one number', passwordErrorMessage);
                isValid = false;
            } else if (newPassword === currentPassword) {
                newPasswordInput.classList.add('invalid');
                showError(passwordModal, 'New password cannot be the same as the current password', passwordErrorMessage);
                isValid = false;
            }

            if (!confirmPassword) {
                confirmPasswordInput.classList.add('invalid');
                showError(passwordModal, 'Confirm password cannot be empty', passwordErrorMessage);
                isValid = false;
            } else if (confirmPassword !== newPassword) {
                confirmPasswordInput.classList.add('invalid');
                showError(passwordModal, 'Passwords do not match', passwordErrorMessage);
                isValid = false;
            }

            return isValid;
        }

        // Email Form Submission
        emailChangeForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            if (!validateEmailForm()) return;

            submitEmailBtn.classList.add('loading');
            submitEmailBtn.disabled = true;

            Swal.fire({
                title: 'Please wait...',
                text: 'Sending OTP to your new email address.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                },
            });

            try {
                const response = await fetch('/change-email', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        newEmail: newEmailInput.value.trim(),
                        currentPassword: currentPasswordEmailInput.value.trim(),
                    }),
                });
                const data = await response.json();

                Swal.close();

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: data.message,
                        showConfirmButton: false,
                        timer: 1500,
                    }).then(() => {
                        window.location.href = data.redirect || '/email-otp';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to send OTP.',
                        showConfirmButton: false,
                        timer: 2000,
                    });
                }
            } catch (error) {
                Swal.close();
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.',
                    showConfirmButton: false,
                    timer: 2000,
                });
                console.error('Fetch Error:', error);
            } finally {
                submitEmailBtn.classList.remove('loading');
                submitEmailBtn.disabled = false;
            }
        });

        // Password Form Submission
        passwordChangeForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            if (!validatePasswordForm()) return;

            submitPasswordBtn.classList.add('loading');
            submitPasswordBtn.disabled = true;
            hideMessages(passwordModal);

            try {
                const response = await fetch('/change-password', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        currentPassword: currentPasswordInput.value.trim(),
                        newPassword: newPasswordInput.value.trim(),
                    }),
                });
                const data = await response.json();

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Password Updated Successfully',
                        showConfirmButton: false,
                        timer: 1500,
                    }).then(() => {
                        closeModal(passwordModal, passwordChangeForm, [currentPasswordInput, newPasswordInput, confirmPasswordInput]);
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to update password.',
                        showConfirmButton: false,
                        timer: 2000,
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.',
                    showConfirmButton: false,
                    timer: 2000,
                });
                console.error('Password update error:', error);
            } finally {
                submitPasswordBtn.classList.remove('loading');
                submitPasswordBtn.disabled = false;
            }
        });

        // Event Listeners
        changeEmailBtn?.addEventListener('click', e => {
            e.preventDefault();
            openModal(emailModal, newEmailInput);
        });

        changePasswordBtn?.addEventListener('click', e => {
            e.preventDefault();
            openModal(passwordModal, currentPasswordInput);
        });

        closeEmailModal.addEventListener('click', () => {
            closeModal(emailModal, emailChangeForm, [newEmailInput, currentPasswordEmailInput]);
        });

        closePasswordModal.addEventListener('click', () => {
            closeModal(passwordModal, passwordChangeForm, [currentPasswordInput, newPasswordInput, confirmPasswordInput]);
        });

        [emailModal, passwordModal].forEach(modal => {
            modal.addEventListener('click', e => {
                if (e.target === modal) {
                    closeModal(modal, modal.querySelector('form'), Array.from(modal.querySelectorAll('.form-input')));
                }
            });
        });

        document.addEventListener('keydown', e => {
            if (e.key === 'Escape') {
                if (emailModal.classList.contains('show')) {
                    closeModal(emailModal, emailChangeForm, [newEmailInput, currentPasswordEmailInput]);
                }
                if (passwordModal.classList.contains('show')) {
                    closeModal(passwordModal, passwordChangeForm, [currentPasswordInput, newPasswordInput, confirmPasswordInput]);
                }
            }
        });

        // Input focus effects
        document.querySelectorAll('.info-input').forEach(input => {
            input.addEventListener('focus', function() {
                this.style.transform = 'scale(1.02)';
            });
            input.addEventListener('blur', function() {
                this.style.transform = 'scale(1)';
            });
        });

        // Touch events for modals
        let touchStartY = 0;
        [emailModal, passwordModal].forEach(modal => {
            modal.addEventListener('touchstart', function(e) {
                touchStartY = e.touches[0].clientY;
            });
            modal.addEventListener('touchmove', function(e) {
                const touchY = e.touches[0].clientY;
                const touchDelta = touchY - touchStartY;
                const modalContent = e.target.closest('.modal-content');
                if (!modalContent) {
                    e.preventDefault();
                }
            });
        });

        // Display session message on page load
   
    </script>
</body>
</html>
<%- include("../../views/partials/user/footer") %>