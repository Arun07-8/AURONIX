   <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Address</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="/css/userside-css/userside-css/addAddresspage.css"  rel="stylesheet">
    <style>
        /* Ensure the main container for the layout is flex */
        .page-container > .container-fluid > .row {
            display: flex;
            flex-wrap: nowrap; /* Prevent wrapping to keep sidebar and main content side-by-side */
            align-items: stretch; /* Stretch children to fill height */
            gap: 20px; /* Space between sidebar and main content */
            flex: 1; /* Allow the row to grow */
            min-height: 600px; /* Ensure a minimum height */
        }

        .address-sidebar-col {
            /* This element is the flex item within the .row */
            flex: 0 0 250px; /* Fixed width of 250px, no grow/shrink */
            max-width: 250px; /* Ensure it doesn't expand beyond 250px */
            /* Apply visual styles here, as this is the visible "column" */
            background: #f8f9fa;
            border-right: 1px solid #e9ecef;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 10px;
            margin: 0; /* Ensure no external margins interfere with flex gap */
            padding: 0; /* Control padding at this level if needed */
            display: flex; /* Make it a flex container for the actual .sidebar inside */
            flex-direction: column;
        }

        .address-sidebar-col .sidebar {
            /* This targets the actual sidebar div from the partial.
               It should yield all layout control to its parent (.address-sidebar-col)
               and only define its internal content layout and basic box model. */
            width: 100% !important; /* Crucial: Let parent control width */
            height: auto !important; /* Crucial: Let content dictate height */
            min-height: 0 !important; /* Crucial: Ensure it can shrink if needed */
            margin: 0 !important; /* Crucial: Remove any margins */
            padding: 0 !important; /* Crucial: Remove any padding from external CSS */
            position: static !important; /* Crucial: Remove any absolute/fixed positioning */
            border: none !important; /* Remove any border that conflicts with wrapper */
            box-shadow: none !important; /* Remove any shadow that conflicts with wrapper */
            background: transparent !important; /* Remove any background that conflicts with wrapper */
            border-radius: 0 !important; /* Remove any border-radius that conflicts with wrapper */
            z-index: auto !important; /* Reset z-index */

            /* Re-establish internal display for its children, as all:unset might have removed it */
            display: flex;
            flex-direction: column;
            flex: 1; /* Allow inner sidebar content to fill its wrapper */
        }

        /* Re-apply styles for inner sidebar elements, targeting them via .address-sidebar-col .sidebar to maintain specificity */
        .address-sidebar-col .sidebar .sidebar-header {
            padding: 25px 20px;
            border-bottom: 1px solid #e9ecef;
            background: linear-gradient(135deg, #C4A676, #8B7355);
            color: white;
            border-radius: 10px 10px 0 0;
        }
        .address-sidebar-col .sidebar .sidebar-header h5 {
            margin: 0 0 12px 0;
            font-weight: 700;
            font-size: 22px;
            letter-spacing: 0.5px;
        }
        .address-sidebar-col .sidebar .sidebar-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 16px;
            font-weight: 300;
        }
        .address-sidebar-col .sidebar .sidebar-menu {
            padding: 25px 0;
        }
        .address-sidebar-col .sidebar .sidebar-menu .nav-link {
            display: flex;
            align-items: center;
            padding: 16px 20px;
            color: #495057;
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
            font-size: 17px;
            font-weight: 500;
            margin-bottom: 8px;
        }
        .address-sidebar-col .sidebar .sidebar-menu .nav-link:hover {
            background: linear-gradient(90deg, #f8f9fa, #fff);
            color: #C4A676;
            border-left-color: #C4A676;
            transform: translateX(3px);
        }
        .address-sidebar-col .sidebar .sidebar-menu .nav-link.active {
            background: linear-gradient(90deg, #f8f9fa, #fff);
            color: #C4A676;
            border-left-color: #C4A676;
            font-weight: 600;
            box-shadow: inset 0 2px 4px rgba(196, 166, 118, 0.1);
        }
        .address-sidebar-col .sidebar .sidebar-menu .nav-link i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            font-size: 16px;
        }

        .address-main-content-col {
            flex: 1; /* Allow main content to grow and take remaining space */
            min-width: 0; /* Important for flex items to shrink properly */
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .page-container > .container-fluid > .row {
                flex-direction: column; /* Stack columns on mobile */
                gap: 15px;
            }
            .address-sidebar-col {
                flex: 0 0 auto; /* Allow sidebar to take auto height in column layout */
                max-width: 100%; /* Allow sidebar to take full width */
                border-right: none; /* Remove right border in column layout */
                border-bottom: 1px solid #e9ecef; /* Add bottom border */
                border-radius: 10px; /* Re-apply border-radius for mobile */
                margin-bottom: 15px; /* Add some space below sidebar */
            }
            .address-sidebar-col .sidebar-header {
                border-radius: 10px 10px 0 0; /* Ensure header corners are rounded */
            }
            .address-main-content-col {
                width: 100%; /* Main content takes full width */
            }
        }
        @media (max-width: 768px) {
            .address-sidebar-col {
                margin: 0; /* Remove potential leftover margins */
            }
        }
    </style>
</head>
<%- include("../../views/partials/user/header") %>
<body class="address-page-container">
    <div class="page-container">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <div class="address-sidebar-col">
                    <div class="sidebar">
                        <div class="sidebar-header">
                            <h5>Hello User</h5>
                            <p>Welcome to your Account</p>
                        </div>
                        <nav class="sidebar-menu">
                            <a class="nav-link" href="/profile"><i class="far fa-user"></i>My Info</a>
                            <a class="nav-link active" href="/address"><i class="fas fa-map-marker-alt"></i>Addresses</a>
                            <a class="nav-link" href="/order"><i class="fas fa-box"></i>My Orders</a>
                            <a class="nav-link" href="/wallet"><i class="fas fa-wallet"></i>Wallet</a>
                            <a class="nav-link" href="/referral"><i class="fas fa-gift"></i>Refer and Earn</a>
                            <a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt"></i>Sign Out</a>
                        </nav>
                    </div>
                </div>
                <!-- Main Content -->
                <div class="address-main-content-col">
                    <div class="main-content">
                        <div class="content-header">
                            <a href="/address" class="back-btn">
                                <i class="fas fa-arrow-left"></i>
                                Back to Addresses
                            </a>
                            <h2>Add New Address</h2>
                        </div>

                        <div class="address-form-container">
                            <form id="addressForm">
                                <!-- Address Type Section -->
                                <div class="address-type-section">
                                    <div class="section-header">
                                        <i class="fas fa-map-marker-alt"></i>
                                        <h4>Address Type</h4>
                                    </div>
                                    <div class="address-type-options">
                                        <div class="address-type-option">
                                            <input type="radio" id="home" name="addressType" value="Home" checked>
                                            <label for="home" class="address-type-label">
                                                <i class="fas fa-home"></i>
                                                Home
                                            </label>
                                        </div>
                                        <div class="address-type-option">
                                            <input type="radio" id="work" name="addressType" value="Work">
                                            <label for="work" class="address-type-label">
                                                <i class="fas fa-briefcase"></i>
                                                Work
                                            </label>
                                        </div>
                                        <div class="address-type-option">
                                            <input type="radio" id="other" name="addressType" value="Other">
                                            <label for="other" class="address-type-label">
                                                <i class="fas fa-map-pin"></i>
                                                Other
                                            </label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Personal Information Section -->
                                <div class="section-header">
                                    <i class="fas fa-user"></i>
                                    <h4>Personal Information</h4>
                                </div>

                                <div class="form-group">
                                    <label for="fullName" class="form-label required">Full Name</label>
                                    <input type="text" id="fullName" name="fullName" class="form-input" placeholder="Enter your full name">
                                    <input type="hidden" name="from" value="<%= from %>">
                                    <span class="error-text" id="fullNameError"></span>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="phoneNumber" class="form-label required">Phone Number</label>
                                        <input type="tel" id="phoneNumber" name="phoneNumber" class="form-input" placeholder="Enter your phone number">
                                        <small style="color: #6c757d; font-size: 12px; margin-top: 5px; display: block;">We'll use this as the primary contact number</small>
                                        <span class="error-text" id="phoneNumberError"></span>
                                    </div>
                                    <div class="form-group">
                                        <label for="alternativePhone" class="form-label">Alternative Phone</label>
                                        <input type="tel" id="alternativePhone" name="alternativePhone" class="form-input" placeholder="Enter alternative phone number">
                                        <span class="error-text" id="alternativePhoneError"></span>
                                    </div>
                                </div>

                                <!-- Address Details Section -->
                                <div class="section-header">
                                    <i class="fas fa-map"></i>
                                    <h4>Address Details</h4>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="city" class="form-label required">City</label>
                                        <input type="text" id="city" name="city" class="form-input" placeholder="Enter your city">
                                        <span class="error-text" id="cityError"></span>
                                    </div>
                                    <div class="form-group">
                                        <label for="state" class="form-label required">State</label>
                                        <input type="text" id="state" name="state" class="form-input" placeholder="Enter your state">
                                        <span class="error-text" id="stateError"></span>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="landmark" class="form-label required">Landmark</label>
                                        <input type="text" id="landmark" name="landmark" class="form-input" placeholder="Nearby recognizable location (e.g., mall, school, etc.)">
                                        <small style="color: #6c757d; font-size: 12px; margin-top: 5px; display: block;">Nearby recognizable location (e.g., mall, school, etc.)</small>
                                        <span class="error-text" id="landmarkError"></span>
                                    </div>
                                    <div class="form-group">
                                        <label for="pincode" class="form-label required">Pincode</label>
                                        <input type="text" id="pincode" name="pincode" class="form-input" placeholder="Enter your pincode">
                                        <span class="error-text" id="pincodeError"></span>
                                    </div>
                                </div>

                                <div class="form-group full-width">
                                    <label for="fullAddress" class="form-label required">Full Address</label>
                                    <textarea id="fullAddress" name="fullAddress" class="form-input" rows="4" placeholder="Enter your complete address including house number, street, area"></textarea>
                                    <span class="error-text" id="fullAddressError"></span>
                                </div>

                                <!-- Default Address Checkbox -->
                                <div class="checkbox-container">
                                    <input type="checkbox" id="defaultAddress" name="isDefault">
                                    <label for="defaultAddress">Set as default address for delivery</label>
                                </div>

                                <button type="submit" class="submit-btn" id="submitBtn">
                                    <i class="fas fa-plus-circle"></i>
                                    Save Address
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <%- include("../../views/partials/user/footer") %>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const form = document.getElementById('addressForm');
        const submitBtn = document.getElementById('submitBtn');

        // Validation rules for client-side
        const validationRules = {
            fullName: {
                required: true,
                errorElement: document.getElementById('fullNameError'),
                validate: value => {
                    if (!value.trim()) return 'Full name must be at least 2 characters';
                    if (value.length < 2) return 'Full name must be at least 2 characters';
                    return '';
                }
            },
            phoneNumber: {
                required: true,
                errorElement: document.getElementById('phoneNumberError'),
                validate: value => {
                    if (!value.trim()) return 'Phone number must be exactly 10 digits';
                    if (!/^\d{10}$/.test(value)) return 'Phone number must be exactly 10 digits';
                    return '';
                }
            },
            alternativePhone: {
                required: false,
                errorElement: document.getElementById('alternativePhoneError'),
                validate: value => {
                    if (value && !/^\d{10}$/.test(value)) return 'Alternative phone must be exactly 10 digits';
                    return '';
                }
            },
            city: {
                required: true,
                errorElement: document.getElementById('cityError'),
                validate: value => {
                    if (!value.trim()) return 'City must be at least 2 characters';
                    if (value.length < 2) return 'City must be at least 2 characters';
                    return '';
                }
            },
            state: {
                required: true,
                errorElement: document.getElementById('stateError'),
                validate: value => {
                    if (!value.trim()) return 'State must be at least 2 characters';
                    if (value.length < 2) return 'State must be at least 2 characters';
                    return '';
                }
            },
            landmark: {
                required: true,
                errorElement: document.getElementById('landmarkError'),
                validate: value => {
                    if (!value.trim()) return 'Landmark must be at least 3 characters';
                    if (value.length < 3) return 'Landmark must be at least 3 characters';
                    return '';
                }
            },
            pincode: {
                required: true,
                errorElement: document.getElementById('pincodeError'),
                validate: value => {
                    if (!value.trim()) return 'Pincode must be exactly 6 digits';
                    if (!/^\d{6}$/.test(value)) return 'Pincode must be exactly 6 digits';
                    return '';
                }
            },
            fullAddress: {
                required: true,
                errorElement: document.getElementById('fullAddressError'),
                validate: value => {
                    if (!value.trim()) return 'Full address must be at least 10 characters';
                    if (value.length < 10) return 'Full address must be at least 10 characters';
                    return '';
                }
            }
        };

        // Validate a single field
        function validateField(fieldId) {
            const field = document.getElementById(fieldId);
            const rule = validationRules[fieldId];
            const value = field.value.trim();
            const errorMessage = rule.validate(value);
            const errorElement = rule.errorElement;

            if (errorMessage) {
                field.classList.add('invalid');
                errorElement.textContent = errorMessage;
                errorElement.style.display = 'block';
            } else {
                field.classList.remove('invalid');
                errorElement.textContent = '';
                errorElement.style.display = 'none';
            }

            return !errorMessage;
        }

        // Check if all required fields are empty
        function areAllRequiredFieldsEmpty() {
            const requiredFields = Object.keys(validationRules).filter(id => validationRules[id].required);
            return requiredFields.every(fieldId => !document.getElementById(fieldId).value.trim());
        }

        // Validate empty fields on direct submit
        function validateEmptyFields() {
            let isValid = true;
            const requiredFields = Object.keys(validationRules).filter(id => validationRules[id].required);

            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value.trim()) {
                    field.classList.add('invalid');
                    validationRules[fieldId].errorElement.textContent = `${field.previousElementSibling.textContent.replace(' *', '')} is required`;
                    validationRules[fieldId].errorElement.style.display = 'block';
                    isValid = false;
                }
            });

            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill in all required fields',
                });
            }

            return isValid;
        }

        // Validate entire form
        function validateForm() {
            let isValid = true;
            Object.keys(validationRules).forEach(fieldId => {
                if (!validateField(fieldId)) {
                    isValid = false;
                }
            });

            if (!isValid) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please correct the errors in the form',
                });
            }

            return isValid;
        }

        // Add live validation
        Object.keys(validationRules).forEach(fieldId => {
            const field = document.getElementById(fieldId);
            field.addEventListener('input', () => {
                validateField(fieldId);
            });

            // Restrict numeric fields
            if (['phoneNumber', 'alternativePhone', 'pincode'].includes(fieldId)) {
                field.addEventListener('input', () => {
                    field.value = field.value.replace(/\D/g, '');
                });
            }
        });

        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Client-side validation
            if (areAllRequiredFieldsEmpty() && !validateEmptyFields()) {
                return;
            }

            if (!validateForm()) {
                return;
            }

            submitBtn.classList.add('loading');
            submitBtn.disabled = true;

            // Collect form data
            const formData = new FormData(form);
            const addressData = {};

            for (let [key, value] of formData.entries()) {
                addressData[key] = value;
            }

            // Handle checkbox
addressData.isDefault = document.getElementById('defaultAddress').checked.toString(); // converts to "true"/"false"


            try {
                const response = await fetch('/address/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(addressData),
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Address added successfully!',
                        timer: 1500,
                        showConfirmButton: false,
                    }).then(() => {
                        form.reset();
                        window.location.href = result.redirectTo;
                    });
                } else {
                    if (result.errors) {
                        let errorText = 'Please correct the following errors:\n';
                        Object.keys(result.errors).forEach(fieldId => {
                            errorText += `${result.errors[fieldId]}\n`;
                        });
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: errorText,
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message || 'Failed to add address. Please try again.',
                        });
                    }
                }
            } catch (error) {
                console.error('Error adding address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong. Please try again.',
                });
            } finally {
                submitBtn.classList.remove('loading');
                submitBtn.disabled = false;
            }
        });

        // Auto-focus first field
        document.getElementById('fullName').focus();
    </script>
</body>
</html>