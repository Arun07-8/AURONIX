<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
    <title>Create New Password - Auronix</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
        }
        
        body {
            min-height: 100vh;
            display: flex;
            overflow-x: hidden;
        }
        
        .form-container {
            flex: 1;
            padding: clamp(1.5rem, 5vw, 2.5rem);
            display: flex;
            flex-direction: column;
            justify-content: center;
            max-width: 100%;
        }
        
        .brand-container {
            flex: 1;
            background-color: #0a0a14;
            position: relative;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .logo {
            width: clamp(120px, 40vw, 250px);
            height: auto;
            max-width: 80%;
            margin: auto;
            position: relative;
            z-index: 2;
        }
        
        .form-content {
            max-width: 480px;
            margin: 0 auto;
            width: 100%;
            padding: clamp(1rem, 3vw, 1.5rem);
        }
        
        h1 {
            font-size: clamp(1.5rem, 5vw, 2.25rem);
            color: #1e293b;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        
        p {
            color: #4b5563;
            margin-bottom: 2rem;
            line-height: 1.6;
            font-size: clamp(0.9rem, 3vw, 1rem);
        }
        
        .input-group {
            margin-bottom: 1.75rem;
            position: relative;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #1e293b;
            font-weight: 500;
            font-size: clamp(0.9rem, 3vw, 1rem);
        }
        
        input {
            width: 100%;
            padding: clamp(0.7rem, 2.5vw, 0.85rem) 2.75rem clamp(0.7rem, 2.5vw, 0.85rem) 1rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: clamp(0.9rem, 3vw, 1rem);
            color: #1e293b;
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        
        input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        button.submit-button {
            width: 100%;
            padding: clamp(0.85rem, 2.5vw, 1rem);
            background-color: #2563eb;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: clamp(0.9rem, 3vw, 1rem);
            cursor: pointer;
            font-weight: 500;
            margin-top: 1.25rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: background-color 0.2s, transform 0.2s;
        }
        
        button.submit-button:hover {
            background-color: #1e40af;
            transform: scale(1.02);
        }
        
        .shape {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, #3b82f6, #1e3a8a);
            filter: blur(40px);
            opacity: 0.6;
            animation: float 10s ease-in-out infinite;
        }
        
        .shape-1 {
            width: clamp(400px, 60vw, 600px);
            height: clamp(400px, 60vw, 600px);
            top: -200px;
            right: -100px;
            animation-delay: 0s;
        }
        
        .shape-2 {
            width: clamp(300px, 50vw, 500px);
            height: clamp(300px, 50vw, 500px);
            bottom: -100px;
            right: 10%;
            animation-delay: 5s;
        }
        
        .error-message {
            margin-top: 0.5rem;
            margin-bottom: 1rem;
            font-size: clamp(0.8rem, 2.5vw, 0.875rem);
            color: #dc2626;
        }

        .toggle-password {
            position: absolute;
            right: 0.85rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            display: flex;
            align-items: center;
            z-index: 3;
        }

        .toggle-password i {
            font-size: clamp(1rem, 4vw, 1.25rem);
            color: #4b5563;
            opacity: 0.6;
            transition: opacity 0.2s;
        }

        .toggle-password:hover i {
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }

        @media (max-width: 768px) {
            body {
                flex-direction: column-reverse;
            }
            
            .form-container {
                flex: 2;
                padding: clamp(1rem, 5vw, 1.5rem);
            }
            
            .brand-container {
                flex: 1;
                min-height: 180px;
            }
            
            .logo {
                width: clamp(100px, 35vw, 200px);
                max-width: 70%;
            }
            
            .form-content {
                max-width: 90%;
            }
            
            .shape-1 {
                width: clamp(300px, 50vw, 400px);
                height: clamp(300px, 50vw, 400px);
                top: -100px;
                right: -50px;
            }
            
            .shape-2 {
                width: clamp(200px, 40vw, 300px);
                height: clamp(200px, 40vw, 300px);
                bottom: -50px;
            }
        }
        
        @media (max-width: 480px) {
            .form-container {
                padding: clamp(0.75rem, 4vw, 1rem);
            }
            
            h1 {
                font-size: clamp(1.25rem, 4vw, 1.75rem);
            }
            
            input, button.submit-button {
                padding: clamp(0.7rem, 3vw, 0.8rem) 2.5rem clamp(0.7rem, 3vw, 0.8rem) 0.75rem;
                font-size: clamp(0.85rem, 3vw, 0.95rem);
            }
            
            label {
                font-size: clamp(0.85rem, 3vw, 0.95rem);
            }
            
            .error-message {
                font-size: clamp(0.75rem, 2.5vw, 0.85rem);
            }
            
            .brand-container {
                min-height: 150px;
            }
            
            .logo {
                width: clamp(80px, 30vw, 150px);
                max-width: 65%;
            }
            
            .toggle-password i {
                font-size: clamp(0.9rem, 4vw, 1rem);
            }
        }
        
        @media (max-width: 360px) {
            .form-container {
                padding: clamp(0.5rem, 3vw, 0.75rem);
            }
            
            h1 {
                font-size: clamp(1rem, 4vw, 1.5rem);
            }
            
            p {
                font-size: clamp(0.8rem, 3vw, 0.9rem);
            }
            
            input, button.submit-button {
                padding: clamp(0.6rem, 3vw, 0.7rem) 2.25rem clamp(0.6rem, 3vw, 0.7rem) 0.5rem;
                font-size: clamp(0.8rem, 3vw, 0.9rem);
            }
            
            label {
                font-size: clamp(0.8rem, 3vw, 0.9rem);
            }
            
            .error-message {
                font-size: clamp(0.7rem, 2.5vw, 0.8rem);
            }
            
            .form-content {
                max-width: 95%;
            }
            
            .logo {
                width: clamp(70px, 25vw, 120px);
                max-width: 60%;
            }
            
            .toggle-password i {
                font-size: clamp(0.8rem, 4vw, 0.9rem);
            }
        }
        
        @media (min-width: 1200px) {
            .form-container {
                padding: clamp(2rem, 3vw, 3rem);
            }
            
            .form-content {
                max-width: 520px;
            }
            
            h1 {
                font-size: clamp(2rem, 3vw, 2.5rem);
            }
            
            input, button.submit-button {
                padding: clamp(0.8rem, 2vw, 1rem) 3rem clamp(0.8rem, 2vw, 1rem) 1.25rem;
                font-size: clamp(1rem, 2vw, 1.1rem);
            }
            
            label {
                font-size: clamp(1rem, 2vw, 1.1rem);
            }
            
            .shape-1 {
                width: clamp(600px, 50vw, 700px);
                height: clamp(600px, 50vw, 700px);
            }
            
            .shape-2 {
                width: clamp(500px, 40vw, 600px);
                height: clamp(500px, 40vw, 600px);
            }
            
            .logo {
                width: clamp(200px, 30vw, 300px);
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <div class="form-container">
        <div class="form-content">
            <h1>Create new password</h1>
            <p>Your new password must be unique from those previously used.</p>
            
            <form id="formid">
                <div class="input-group">
                    <label for="password">Enter Your New Password</label>
                    <div style="position: relative;">
                        <input type="password" id="password" placeholder="New Password">
                        <button type="button" class="toggle-password" data-target="password">
                            <i class="fas fa-eye toggle-icon"></i>
                        </button>
                    </div>
                    <div class="error-message" id="email-error"></div>
                </div>
                
                <div class="input-group">
                    <div style="position: relative;">
                        <input type="password" id="confirmpassword" placeholder="Confirm Password">
                        <button type="button" class="toggle-password" data-target="confirmpassword">
                            <i class="fas fa-eye toggle-icon"></i>
                        </button>
                    </div>
                    <div class="error-message" id="email-error2"></div>
                </div>
                
                <button type="submit" class="submit-button">Reset Password</button>
            </form>
        </div>
    </div>
    
    <div class="brand-container">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <img src="/api/placeholder/300/120" alt="Auronix Logo" class="logo">
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script>
        const form = document.getElementById('formid');

        function hideError(errorElement) {
            errorElement.textContent = '';
        }

        function togglePassword(targetId) {
            try {
                const input = document.getElementById(targetId);
                const button = document.querySelector(`.toggle-password[data-target="${targetId}"]`);
                const icon = button.querySelector('.toggle-icon');

                if (!input || !icon) {
                    console.error(`Toggle password failed: input or icon not found for targetId=${targetId}`);
                    return;
                }

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }

                // Force re-render
                input.focus();
                input.dispatchEvent(new Event('input'));
                console.debug(`Toggled password visibility for ${targetId}: type=${input.type}`);
            } catch (error) {
                console.error('Error in togglePassword:', error.message);
            }
        }

        // Add event listeners to toggle buttons
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', () => {
                const targetId = button.getAttribute('data-target');
                togglePassword(targetId);
            });
        });

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmpassword');
            const passwordError = document.getElementById('email-error');
            const confirmPasswordError = document.getElementById('email-error2');

            const passwordVal = passwordInput.value.trim();
            const cpasswordVal = confirmPasswordInput.value.trim();
            const strongpass = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
            let isValid = true;

            // Validate password
            if (!passwordVal) {
                passwordError.textContent = 'Password cannot be empty';
                isValid = false;
            } else if (passwordVal.length < 8) {
                passwordError.textContent = 'Password must be at least 8 characters';
                isValid = false;
            } else if (!strongpass.test(passwordVal)) {
                passwordError.textContent = 'Password must include at least one letter, one number, and one special character (@$!%*?&)';
                isValid = false;
            } else {
                hideError(passwordError);
            }

            // Validate confirm password
            if (!cpasswordVal) {
                confirmPasswordError.textContent = 'Confirm Password cannot be empty';
                isValid = false;
            } else if (passwordVal !== cpasswordVal) {
                confirmPasswordError.textContent = 'Passwords do not match';
                isValid = false;
            } else {
                hideError(confirmPasswordError);
            }

            if (!isValid) {
                return;
            }

            // Submit to backend using fetch
            console.log('Submitting password reset:', { password: passwordVal }); // Debug log
            try {
                const response = await fetch('/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password: passwordVal }),
                });

                const data = await response.json();
                console.log('Reset password response:', data); // Debug log

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Password Reset Successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = data.redirectUrl || '/login';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to reset password. Please try again.',
                        showConfirmButton: false,
                        timer: 2000
                    });
                    if (data.message && data.message.includes('session')) {
                        setTimeout(() => {
                            window.location.href = '/email-forgot';
                        }, 2000);
                    }
                }
            } catch (error) {
                console.error('Reset password error:', error.message); // Debug log
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to reset password. Please try again.',
                    showConfirmButton: false,
                    timer: 2000
                });
                if (error.message.includes('Failed to fetch')) {
                    setTimeout(() => {
                        window.location.href = '/email-forgot';
                    }, 2000);
                }
            }
        });
    </script>
</body>
</html>