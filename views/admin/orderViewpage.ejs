
    <%- include("../../views/partials/admin/header") %>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Order Details - Management System</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
        <link href="/css/admin-css/orderViewPage.css" rel="stylesheet">
    </head>
    <body>
        <div class="main-container">
            <!-- Page Header -->
            <div class="page-header">
                <h1 class="page-title">
                    <i class="fas fa-receipt"></i>
                    Order Management
                </h1>
                <p class="page-subtitle">View and manage order details, items, and returns with comprehensive tracking</p>
            </div>

            <!-- Order Details Section -->
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <span>
                            <i class="fas fa-info-circle"></i>
                            Order Details
                        </span>
                        <div class="status-controls">
                            <select class="form-select status-dropdown" id="orderStatus_<%= order._id %>">
  <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
  <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
  <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
  <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
  <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                            </select>
                            <button class="btn update-btn" data-order-id="<%= order._id %>" onclick="updateOrderStatus('<%= order._id %>', this)">
                                <i class="fas fa-sync-alt me-1"></i> Update Status
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="info-grid">
                        <div class="info-section">
                            <h6 class="section-title">Order Information</h6>
                            <div class="info-row">
                                <p class="info-label">Order ID</p>
                                <p class="info-value"><%= order.orderId %></p>
                            </div>
                            <div class="info-row">
                                <p class="info-label">Customer Name</p>
                                <%if(order.userId){%>
                                <p class="info-value"><%= order.userId.name || 'N/A' %></p>
                                <%}else{%>
                                <p class="info-value">user not found</p>
                                    <%}%>
                            </div>
                            <div class="info-row">
                                <p class="info-label">Order Date</p>
                                <p class="info-value"><%= order.invoiceDate ? new Date(order.invoiceDate).toLocaleDateString() : new Date(order.createdAt).toLocaleDateString() %></p>
                            </div>
                        </div>
                        <div class="info-section">
                            <h6 class="section-title">Shipping Information</h6>
                            <div class="info-row">
                                <p class="info-label">Address</p>
                                <p class="info-value"><%= order.shippingAddress.fullAddress %></p>
                            </div>
                            <div class="info-row">
                                <p class="info-label">Phone</p>
                                <p class="info-value"><%= order.shippingAddress.phone %></p>
                            </div>
                            <div class="info-row">
                                <p class="info-label">Alt Phone</p>
                                <p class="info-value"><%= order.shippingAddress.altPhone || 'N/A' %></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Items Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-shopping-cart"></i>
                    Order Items
                </div>
                <div class="card-body p-0">
                    <div class="table-container">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Product Name</th>
                                        <th>Quantity</th>
                                        <th>original Price</th>
                                        <th>Sale Price</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
 <tbody>
  <% order.orderedItems.forEach(item => { %>
    <tr>
      <!-- Product Image -->
      <td>
        <div class="product-icon">
          <img src="<%= item.product.productImage?.[0] || '/images/placeholder.png' %>" 
               alt="<%= item.product.productName %>" 
               class="product-img">
        </div>
      </td>

      <!-- Product Name -->
      <td>
        <p class="product-name"><%= item.product.productName %></p>
      </td>

      <!-- Quantity -->
      <td>
        <span class="quantity-badge"><%= item.quantity %></span>
      </td>

      <!-- Unit Price -->
      <td>

          <span class="text-success fw-bold ms-1">₹<%= item.product.salePrice.toFixed(2) %></span>
      </td>

      <!-- Total Price (unit × quantity) -->
      <td>
        <span class="price-text">₹<%= item.finalPrice.toFixed() %></span>
      </td>

      <!-- Status -->
      <td>
        <span class="status-badge status-<%= item.status.toLowerCase() %>">
          <i class="fas fa-circle" style="font-size: 0.5rem;"></i>
          <%= item.status %>
        </span>
      </td>
    </tr>
  <% }) %>

  <!-- Offer Discount -->
  <tr>
    <td colspan="4" class="text-end"><strong>Offer Discount</strong></td>
    <td colspan="2">- ₹<%= order.totalOfferDiscount.toFixed(2) %></td>
  </tr>

  <!-- Coupon Discount -->
  <tr>
    <td colspan="4" class="text-end"><strong>Coupon Discount</strong></td>
    <td colspan="2">- ₹<%= order.discountAmount.toFixed(2) %></td>
  </tr>

  <!-- Grand Total -->
  <tr class="total-row">
    <td colspan="4" class="text-end fw-bold">
      <i class="fas fa-calculator me-2"></i> Grand Total
    </td>
    <td colspan="2" class="fw-bold text-success">₹<%= order.grandTotal.toFixed(2) %></td>
  </tr>
</tbody>


                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Return Items Section -->
            <div class="card">
                <div class="card-header">
                    <i class="fas fa-undo"></i>
                    Return Items
                </div>
                <div class="card-body p-0">
                    <div class="table-container">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Product Name</th>
                                        <th>Quantity</th>
                                        <th>Price</th>
                                        <th>Reason</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
<tbody>
  <% if (returnRequestProduct && returnRequestProduct.length > 0) { %>
    <% returnRequestProduct.forEach(item => { %>
      <tr>
        <td>
          <div class="product-icon">
            <img 
              src="<%= item.productImage || '/images/placeholder.png' %>" 
              alt="<%= item.name || 'Product' %>" 
              class="product-img">
          </div>
        </td>
        <td>
          <p class="product-name"><%= item.name || 'Unnamed Product' %></p>
        </td>
        <td>
          <span class="quantity-badge"><%= item.quantity || 0 %></span>
        </td>
        <td>
          <span class="price-text">
            ₹<%= (item.refundAmount || 0).toFixed(2) %>
          </span>
        </td>
        <td><%= item.returnReason || 'N/A' %></td>
        <td>
          <button class="btn process-btn" 
                  onclick="confirmAcceptReturn('<%= order._id %>', '<%= item.productId %>')">
            <i class="fas fa-check me-1"></i> Accept
          </button>
          <button class="btn btn-danger" 
                  onclick="showRejectModal('<%= order._id %>', '<%= item.productId %>', 'reject')">
            <i class="fas fa-times me-1"></i> Reject
          </button>
        </td>
      </tr>
    <% }) %>
  <% } else { %>
    <tr>
      <td colspan="6" class="empty-state">
        <i class="fas fa-box-open"></i>
        <p>No return items found for this order</p>
      </td>
    </tr>
  <% } %>
</tbody>


                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
<!-- Rejection Reason Modal -->
<div class="modal fade" id="rejectReasonModal" tabindex="-1" aria-labelledby="rejectReasonModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectReasonModalLabel">Enter Rejection Reason</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="rejectReason" class="form-label">Reason for Rejection</label>
                    <textarea class="form-control" id="rejectReason" rows="6" placeholder="Enter the reason for rejecting the return" required></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="submitRejectReason">Submit Rejection</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
        <script>
            // Update order status with enhanced UX
            async function updateOrderStatus(orderId, button) {
                const select = document.querySelector(`#orderStatus_${orderId}`);
                const selectedStatus = select.value;
                const originalContent = button.innerHTML;

                // Add loading state
                button.classList.add('loading');
                button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Updating...';
                button.disabled = true;

                try {
                    const response = await fetch(`/admin/orders-status/${orderId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ newStatus: selectedStatus }),
                    });

                    const data = await response.json();

                    if (response.ok) {
                        // Success state
                        button.innerHTML = '<i class="fas fa-check me-1"></i> Updated!';
                        button.style.background = 'var(--success-color)';
                        
                        // Update dropdown
                        select.value = selectedStatus;
                        
                        // Show success notification
                        showNotification(data.message, 'success');

                        setTimeout(() => {
                            button.innerHTML = originalContent;
                            button.style.background = '';
                            button.classList.remove('loading');
                            button.disabled = false;
                        }, 2000);
                    } else {
                        throw new Error(data.message || 'Failed to update status');
                    }
                } catch (error) {
                    console.error('Error updating status:', error);
                    showNotification(error.message, 'error');
                    
                    // Reset button
                    button.innerHTML = originalContent;
                    button.classList.remove('loading');
                    button.disabled = false;
                }
            }
async function confirmAcceptReturn(orderId, productId) {
  const result = await Swal.fire({
    title: 'Accept Return?',
    text: "Are you sure you want to accept the return request?",
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, accept it!',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#10b981',
  });

  if (result.isConfirmed) {       
    try {
      const response = await fetch(`/admin/orders/${orderId}/accept/${productId}`, {
        method: 'PATCH',
      });

      const contentType = response.headers.get("content-type");

      if (!response.ok) {
        throw new Error(`Server error ${response.status}`);
      }

      if (contentType && contentType.includes("application/json")) {
        const data = await response.json();
        await Swal.fire('Accepted!', data.message || 'Return accepted.', 'success');
        setTimeout(() => location.reload(), 1000);
      } else {
        throw new Error('Unexpected server response (not JSON)');
      }

    } catch (error) {
      console.error('Accept Return Error:', error);
      await Swal.fire('Error!', error.message || 'Something went wrong.', 'error');
    }
  }
}




            // Enhanced notification system
            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `alert alert-${type === 'error' ? 'danger' : type} notification`;
                
                const icon = type === 'success' ? 'fas fa-check-circle' : 
                            type === 'error' ? 'fas fa-exclamation-circle' : 
                            'fas fa-info-circle';
                
                notification.innerHTML = `
                    <div class="d-flex align-items-center">
                        <i class="${icon} me-2"></i>
                        <span>${message}</span>
                        <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
                    </div>
                `;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.style.animation = 'slideOut 0.3s ease';
                        setTimeout(() => notification.remove(), 300);
                    }
                }, 5000);
            }


    async function showRejectModal(orderId, productId) {
  const { value: reason } = await Swal.fire({
    title: 'Reject Return?',
    input: 'textarea',
    inputLabel: 'Reason for rejection',
    inputPlaceholder: 'Type your reason here...',
    inputAttributes: {
      'aria-label': 'Type your reason here'
    },
    showCancelButton: true,
    confirmButtonText: 'Reject',
    confirmButtonColor: '#ef4444',
  });

  if (reason) {
    rejectReturn(orderId, productId, reason);
  }
}


            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Alt + U for update status
                if (e.altKey && e.key === 'u') {
                    e.preventDefault();
                    document.querySelector('.update-btn').click();
                }
                
                // Alt + R for refresh page
                if (e.altKey && e.key === 'r') {
                    e.preventDefault();
                    window.location.reload();
                }
            });

            // Auto-save status changes
            let statusTimeout;
            document.querySelector('#orderStatus').addEventListener('change', function() {
                clearTimeout(statusTimeout);
                statusTimeout = setTimeout(() => {
                    if (confirm('Auto-save status change?')) {
                        updateOrderStatus('<%= order._id %>');
                    }
                }, 1000);
            });

            // Print functionality
            function printOrder() {
                window.print();
            }

            // Add print styles
            const printStyle = document.createElement('style');
            printStyle.textContent = `
                @media print {
                    body { background: white !important; }
                    .card { box-shadow: none !important; border: 1px solid #000 !important; }
                    .btn, .status-controls { display: none !important; }
                    .page-header { margin-bottom: 1rem !important; }
                }
            `;
            document.head.appendChild(printStyle);

            // Open Reject Modal and store order/product IDs
function openRejectModal(orderId, productId) {
    const modal = new bootstrap.Modal(document.getElementById('rejectReasonModal'));
    const submitBtn = document.getElementById('submitRejectReason');
    const rejectReasonInput = document.getElementById('rejectReason');

    // Clear previous input
    rejectReasonInput.value = '';

    // Store IDs in button data attributes
    submitBtn.dataset.orderId = orderId;
    submitBtn.dataset.productId = productId;

    // Handle submit button click

    modal.show();
}
async function rejectReturn(orderId, productId, rejectReasonInput) {
  try {
    const res = await fetch(`/admin/orders/${orderId}/reject/${productId}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ reason:rejectReasonInput }),
    });

    const data = await res.json();
    if (res.ok) {
      Swal.fire('Rejected!', data.message || 'Return rejected.', 'success');
      setTimeout(() => location.reload(), 1000);
    } else {
      throw new Error(data.message || 'Failed to reject return.');
    }
  } catch (err) {
    console.error('Reject Return Error:', err);
    Swal.fire('Error!', err.message, 'error');
  }
}


        </script>
        <%- include("../../views/partials/admin/footer") %>
    </body>
    </html>