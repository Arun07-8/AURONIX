<%- include("../../views/partials/admin/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offer Management - Add New Offer</title>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
            overflow-x: hidden;
            min-height: 100vh;
        }

        .app-layout {
            display: flex;
            min-height: 100vh;
            width: 100vw;
            overflow-x: hidden;
        }

        .sidebar {
            width: 280px;
            background: linear-gradient(180deg, #2d3748 0%, #1a202c 100%);
            color: white;
            position: fixed;
            height: 100vh;
            left: 0;
            top: 0;
            z-index: 1000;
            overflow-y: auto;
            transition: transform 0.3s ease;
            box-shadow: 4px 0 20px rgba(0,0,0,0.15);
            flex-shrink: 0;
        }

        .sidebar::-webkit-scrollbar {
            width: 6px;
        }

        .sidebar::-webkit-scrollbar-track {
            background: rgba(255,255,255,0.1);
        }

        .sidebar::-webkit-scrollbar-thumb {
            background: rgba(255,255,255,0.3);
            border-radius: 3px;
        }

        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #e2e8f0;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-section-title {
            padding: 0.5rem 1.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            color: #a0aec0;
            letter-spacing: 0.05em;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: #cbd5e0;
            text-decoration: none;
            transition: all 0.2s ease;
            border-left: 3px solid transparent;
        }

        .nav-item:hover {
            background: rgba(255,255,255,0.05);
            color: white;
        }

        .nav-item.active {
            background: linear-gradient(90deg, rgba(102, 126, 234, 0.2), rgba(102, 126, 234, 0.05));
            border-left-color: #667eea;
            color: white;
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            margin-right: 0.75rem;
            opacity: 0.7;
        }

        .main-content {
            flex: 1;
            margin-left: 280px;
            width: calc(100vw - 280px);
            min-height: 100vh;
            overflow-x: hidden;
            box-sizing: border-box;
            padding-top: 80px;
        }

        .header {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 15px rgba(0,0,0,0.08);
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: fixed;
            top: 0;
            left: 280px;
            right: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .menu-toggle {
            display: none;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #4a5568;
        }

        .header h1 {
            font-size: 1.75rem;
            font-weight: 600;
            color: #2d3748;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            color: #6b7280;
            margin-top: 0.25rem;
        }

        .breadcrumb-separator {
            color: #d1d5db;
        }

        .admin-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .admin-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .admin-details {
            display: flex;
            flex-direction: column;
        }

        .admin-name {
            font-weight: 500;
            color: #374151;
        }

        .admin-role {
            font-size: 0.75rem;
            color: #6b7280;
        }

        .container {
            width: calc(100% - 1.5rem);
            margin: 2rem 1rem 2rem 0.5rem;
            padding: 0;
            box-sizing: border-box;
        }

        .form-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.12);
            overflow: hidden;
            border: 1px solid rgba(255,255,255,0.2);
            width: 100%;
        }

        .form-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 2rem;
            border-bottom: 1px solid #e2e8f0;
            position: relative;
            overflow: hidden;
        }

        .form-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        }

        .form-header h2 {
            color: #2d3748;
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .form-subtitle {
            color: #6b7280;
            font-size: 1rem;
        }

        .form-body {
            padding: 2.5rem;
        }

        .form-grid {
            display: grid;
            gap: 2rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 0.5rem;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
        }

        .required {
            color: #ef4444;
        }

        input, select, textarea {
            width: 100%;
            padding: 0.6rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.95rem;
            min-height: 38px;
            transition: all 0.3s ease;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            box-sizing: border-box;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.15), 0 4px 8px rgba(0,0,0,0.1);
        }

        textarea {
            resize: vertical;
            min-height: 100px;
        }

        .field-error {
            border-color: #ef4444 !important;
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.15) !important;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.825rem;
            margin-top: 0.4rem;
            display: none;
            font-weight: 500;
            padding-left: 0.25rem;
        }

        .error-message.show {
            display: block;
        }

        .form-actions {
            padding: 2rem 2.5rem;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-top: 1px solid #e2e8f0;
            display: flex;
            gap: 1.5rem;
            justify-content: flex-end;
        }

        .btn {
            padding: 1rem 2rem;
            border: none;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            min-width: 140px;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(75, 85, 99, 0.4);
        }

        .success-message, .error-message-global {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 1.25rem 2rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: none;
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .error-message-global {
            background: linear-gradient(135deg, #ef4444 0%, #b91c1c 100%);
        }

        .success-message.show, .error-message-global.show {
            display: block;
            animation: slideInDown 0.5s ease-out;
        }

        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .date-input-wrapper {
            position: relative;
        }

        .date-input-wrapper input[type="text"] {
            padding-right: 2.5rem;
        }

        .date-icon {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                z-index: 1001;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                width: 100vw;
                padding-top: 80px;
            }

            .header {
                padding: 1rem;
                left: 0;
                width: 100vw;
            }

            .header h1 {
                font-size: 1.5rem;
            }

            .admin-details {
                display: none;
            }

            .container {
                width: calc(100% - 2rem);
                margin: 1rem;
            }

            .form-body {
                padding: 1.5rem;
            }

            .form-header {
                padding: 1.5rem;
            }

            .form-row {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }

            .form-grid {
                gap: 1.5rem;
            }

            .form-actions {
                padding: 1.5rem;
                flex-direction: column-reverse;
            }

            .btn {
                width: 100%;
            }
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        .sidebar-overlay.show {
            display: block;
        }
    </style>
</head>
<body>
    <div class="app-layout">
        <div class="sidebar-overlay" id="sidebarOverlay"></div>
        <main class="main-content">
            <header class="header">
                <div class="header-left">
                    <button class="menu-toggle" id="menuToggle">☰</button>
                    <div>
                        <h1>Offer Management</h1>
                        <div class="breadcrumb">
                            <span>Dashboard</span>
                            <span class="breadcrumb-separator">•</span>
                            <span>Offer Management</span>
                            <span class="breadcrumb-separator">•</span>
                            <span>Add New Offer</span>
                        </div>
                    </div>
                </div>
                <div class="admin-info">
                    <div class="admin-avatar">A</div>
                    <div class="admin-details">
                        <div class="admin-name">Admin User</div>
                        <div class="admin-role">Administrator</div>
                    </div>
                </div>
            </header>

            <div class="container">
                <div class="form-card">
                    <div class="form-header">
                        <h2>Add New Offer</h2>
                        <p class="form-subtitle">Create a new promotional offer for your products, categories, or brands</p>
                    </div>

                    <form id="offerForm" class="form-body">
                        <div class="form-grid">
                            <div class="form-group full-width">
                                <label for="offerName">Offer Name <span class="required">*</span></label>
                                <input type="text" id="offerName" name="offerName" placeholder="Enter offer name">
                                <div class="error-message" id="offerNameError">Offer name is required</div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="offerType">Offer Type <span class="required">*</span></label>
                                    <select id="offerType" name="offerType">
                                        <option value="">-- Select Offer Type --</option>
                                        <option value="product">Product</option>
                                        <option value="category">Category</option>
                                        <option value="brand">Brand</option>
                                    </select>
                                    <div class="error-message" id="offerTypeError">Please select an offer type</div>
                                </div>

                                <div class="form-group" id="applicableGroup" style="display: none;">
                                    <label for="applicable">Applicable To <span class="required">*</span></label>
                                    <select id="applicable" name="applicable" disabled>
                                        <option value="">-- Select Item --</option>
                                    </select>
                                    <div class="error-message" id="applicableError">Please select what this offer applies to</div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="discountType">Discount Type <span class="required">*</span></label>
                                    <select id="discountType" name="discountType">
                                        <option value="">-- Select Discount Type --</option>
                                        <option value="percentage">Percentage</option>
                                        <option value="flat">Flat Amount</option>
                                    </select>
                                    <div class="error-message" id="discountTypeError">Please select a discount type</div>
                                </div>

                                <div class="form-group">
                                    <label for="offerAmount" id="offerAmountLabel">Offer Amount <span class="required">*</span></label>
                                    <input type="number" id="offerAmount" name="offerAmount" placeholder="Enter amount" min="0" step="0.01">
                                    <div class="error-message" id="offerAmountError">Please enter a valid offer amount</div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="validFrom">Valid From <span class="required">*</span></label>
                                    <div class="date-input-wrapper">
                                        <input type="text" id="validFrom" name="validFrom" placeholder="dd/mm/yyyy" maxlength="10">
                                        <span class="date-icon">📅</span>
                                    </div>
                                    <div class="error-message" id="validFromError">Please enter valid from date in dd/mm/yyyy format</div>
                                </div>

                                <div class="form-group">
                                    <label for="validUpto">Valid Upto <span class="required">*</span></label>
                                    <div class="date-input-wrapper">
                                        <input type="text" id="validUpto" name="validUpto" placeholder="dd/mm/yyyy" maxlength="10">
                                        <span class="date-icon">📅</span>
                                    </div>
                                    <div class="error-message" id="validUptoError">Please enter valid upto date in dd/mm/yyyy format</div>
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <label for="description">Description</label>
                                <textarea id="description" name="description" placeholder="Enter offer description (optional)"></textarea>
                            </div>
                        </div>
                    </form>

                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="goBack()">
                            ← Back
                        </button>
                        <button type="submit" form="offerForm" class="btn btn-primary">
                            + Add Offer
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Date formatting function
        function formatDateInput(input) {
            let value = input.value.replace(/\D/g, '');
            if (value.length >= 3 && value.length <= 4) {
                value = value.slice(0, 2) + '/' + value.slice(2);
            } else if (value.length >= 5) {
                value = value.slice(0, 2) + '/' + value.slice(2, 4) + '/' + value.slice(4, 8);
            }
            input.value = value;
        }

        // Date validation function
        function isValidDate(dateString) {
            const dateRegex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
            if (!dateRegex.test(dateString)) return false;

            const [, day, month, year] = dateString.match(dateRegex);
            const date = new Date(year, month - 1, day);
            
            return date.getFullYear() == year && 
                   date.getMonth() == month - 1 && 
                   date.getDate() == day;
        }

        // Convert dd/mm/yyyy to Date object
        function parseDate(dateString) {
            const [day, month, year] = dateString.split('/');
            return new Date(year, month - 1, day);
        }

        // Add date input formatting
        document.getElementById('validFrom').addEventListener('input', function() {
            formatDateInput(this);
            validateField(this);
        });

        document.getElementById('validUpto').addEventListener('input', function() {
            formatDateInput(this);
            validateField(this);
        });

        // Form elements
        const form = document.getElementById('offerForm');
        const offerType = document.getElementById('offerType');
        const applicable = document.getElementById('applicable');
        const applicableGroup = document.getElementById('applicableGroup');
        const discountType = document.getElementById('discountType');
        const offerAmount = document.getElementById('offerAmount');
        const validFrom = document.getElementById('validFrom');
        const validUpto = document.getElementById('validUpto');

        // Handle offerType change
        offerType.addEventListener('change', async function () {
            const selectedType = this.value.toLowerCase();
            if (!applicableGroup || !applicable) return;

            clearError('offerType');
            clearError('applicable');

            if (selectedType === 'product') {
                const res = await fetch('/admin/offer-products');
                const data = await res.json();
                fillDropdown(applicable, data.products, 'productName');
                applicableGroup.style.display = 'block';
                applicable.disabled = false;
            } else if (selectedType === 'category') {
                const res = await fetch('/admin/offer-categories');
                const data = await res.json();
                fillDropdown(applicable, data.categories, 'name');
                applicableGroup.style.display = 'block';
                applicable.disabled = false;
            } else if (selectedType === 'brand') {
                const res = await fetch('/admin/offer-brands');
                const data = await res.json();
                fillDropdown(applicable, data.brands, 'name');
                applicableGroup.style.display = 'block';
                applicable.disabled = false;
            } else {
                applicable.innerHTML = '<option value="">-- Select Item --</option>';
                applicable.disabled = true;
                applicableGroup.style.display = 'none';
                clearError('applicable');
            }

            validateField(this);
        });

        // Fill dropdown
        function fillDropdown(select, items, labelKey) {
            select.disabled = false;
            select.innerHTML = `<option value="">-- Select --</option>`;
            items.forEach(item => {
                select.innerHTML += `<option value="${item._id}">${item[labelKey]}</option>`;
            });
        }

        // Update amount label based on discount type
        discountType.addEventListener('change', function() {
            const amountLabel = document.getElementById('offerAmountLabel');
            const amountInput = document.getElementById('offerAmount');
            if (this.value === 'percentage') {
                amountLabel.innerHTML = 'Offer Amount (%) <span class="required">*</span>';
                amountInput.placeholder = 'Enter percentage (e.g., 10)';
                amountInput.max = '100';
            } else if (this.value === 'flat') {
                amountLabel.innerHTML = 'Offer Amount ($) <span class="required">*</span>';
                amountInput.placeholder = 'Enter flat amount (e.g., 50.00)';
                amountInput.removeAttribute('max');
            } else {
                amountLabel.innerHTML = 'Offer Amount <span class="required">*</span>';
                amountInput.placeholder = 'Enter amount';
                amountInput.removeAttribute('max');
            }
            clearError('discountType');
            validateField(this);
        });

        // Clear error function
        function clearError(fieldName) {
            const field = document.getElementById(fieldName);
            const errorMsg = document.getElementById(fieldName + 'Error');
            if (field && errorMsg) {
                field.classList.remove('field-error');
                errorMsg.classList.remove('show');
                errorMsg.textContent = '';
            }
        }

        // Show error function
        function showError(fieldName, message) {
            const field = document.getElementById(fieldName);
            const errorMsg = document.getElementById(fieldName + 'Error');
            if (field && errorMsg) {
                field.classList.add('field-error');
                errorMsg.textContent = message;
                errorMsg.classList.add('show');
            }
        }

        // Validation functions
        function validateField(field) {
            const value = field.value.trim();
            const name = field.name;

            clearError(name);

            if (!value && isFieldRequired(name)) {
                showError(name, getFieldDisplayName(name) + ' is required');
                return false;
            }

            if (!value && !isFieldRequired(name)) return true;

            if (name === 'offerName') {
                const nameRegex =  /^[\p{L}\p{N}\s\-&@%()!#$*+:'",.🔥🌟🎉😎💥]{3,50}$/u;
                if (!nameRegex.test(value)) {
                    showError(name, 'Offer name must be 3-50 characters and contain only letters, numbers, spaces, hyphens, or &');
                    return false;
                }
            }

            if (name === 'offerAmount') {
                const amount = parseFloat(value);
                if (isNaN(amount) || amount <= 0) {
                    showError(name, 'Please enter a valid positive amount');
                    return false;
                }
                if (discountType.value === 'percentage' && amount > 100) {
                    showError(name, 'Percentage cannot exceed 100%');
                    return false;
                }
            }

            if (name === 'validFrom' || name === 'validUpto') {
                if (!value) {
                    showError(name, 'Please enter a valid date in dd/mm/yyyy format');
                    return false;
                }

                if (!isValidDate(value)) {
                    showError(name, 'Please enter a valid date in dd/mm/yyyy format');
                    return false;
                }

                const inputDate = parseDate(value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                if (inputDate < today) {
                    showError(name, 'Date cannot be in the past');
                    return false;
                }

                if (name === 'validUpto') {
                    const fromValue = validFrom.value;
                    if (fromValue && isValidDate(fromValue)) {
                        const fromDate = parseDate(fromValue);
                        if (inputDate < fromDate) {
                            showError(name, 'Valid upto date must be on or after valid from date');
                            return false;
                        }
                    }
                }

                if (name === 'validFrom' && validUpto.value && isValidDate(validUpto.value)) {
                    const toDate = parseDate(validUpto.value);
                    if (toDate < inputDate) {
                        showError('validUpto', 'Valid upto date must be on or after valid from date');
                        return false;
                    }
                }
            }

            return true;
        }

        function isFieldRequired(fieldName) {
            const requiredFields = ['offerName', 'offerType', 'applicable', 'discountType', 'offerAmount', 'validFrom', 'validUpto'];
            return requiredFields.includes(fieldName);
        }

        function getFieldDisplayName(fieldName) {
            const displayNames = {
                'offerName': 'Offer name',
                'offerType': 'Offer type',
                'applicable': 'Applicable to',
                'discountType': 'Discount type',
                'offerAmount': 'Offer amount',
                'validFrom': 'Valid from date',
                'validUpto': 'Valid upto date'
            };
            return displayNames[fieldName] || fieldName;
        }

        // Real-time validation for all fields
        document.querySelectorAll('input, select, textarea').forEach(field => {
            field.removeAttribute('required');
            
            field.addEventListener('input', function() {
                validateField(this);
                if (this.name === 'validFrom' && validUpto.value) {
                    validateField(validUpto);
                } else if (this.name === 'validUpto' && validFrom.value) {
                    validateField(validFrom);
                }
            });
            
            field.addEventListener('change', function() {
                validateField(this);
                if (this.name === 'validFrom' && validUpto.value) {
                    validateField(validUpto);
                } else if (this.name === 'validUpto' && validFrom.value) {
                    validateField(validFrom);
                }
            });

            field.addEventListener('blur', function() {
                validateField(this);
                if (this.name === 'validFrom' && validUpto.value) {
                    validateField(validUpto);
                } else if (this.name === 'validUpto' && validFrom.value) {
                    validateField(validFrom);
                }
            });
        });

        // Mobile menu functionality
        const menuToggle = document.getElementById('menuToggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');

        if (menuToggle && sidebar && sidebarOverlay) {
            menuToggle.addEventListener('click', () => {
                sidebar.classList.toggle('open');
                sidebarOverlay.classList.toggle('show');
            });

            sidebarOverlay.addEventListener('click', () => {
                sidebar.classList.remove('open');
                sidebarOverlay.classList.remove('show');
            });
        }

        // Form submission
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Validate all fields
            let isValid = true;
            const fields = document.querySelectorAll('input, select, textarea');
            fields.forEach(field => {
                if (!validateField(field)) {
                    isValid = false;
                }
            });

            if (isValid) {
                const formData = {
                    offerName: document.getElementById('offerName').value,
                    offerType: document.getElementById('offerType').value,
                    applicable: document.getElementById('applicable').value,
                    discountType: document.getElementById('discountType').value,
                    offerAmount: parseFloat(document.getElementById('offerAmount').value),
                    validFrom: document.getElementById('validFrom').value,
                    validUpto: document.getElementById('validUpto').value,
                    description: document.getElementById('description').value || null
                };

                try {
                    const response = await fetch('/admin/add-offers', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to create offer');
                    }

                    // Success case
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Offer created successfully!',
                        confirmButtonColor: '#3085d6',
                        timer: 5000,
                        timerProgressBar: true
                    }).then(() => {
                        form.reset();
                        applicable.innerHTML = '<option value="">-- Select Item --</option>';
                        applicable.disabled = true;
                        applicableGroup.style.display = 'none';
                        offerType.value = '';
                        discountType.value = '';
                        window.location.href = '/admin/offers';
                    });
                } catch (error) {
                    // Error case
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to create offer. Please try again.',
                        confirmButtonColor: '#3085d6',
                        timer: 5000,
                        timerProgressBar: true
                    }).then(() => {
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    });
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Form Error',
                    text: 'Please correct the errors in the form and try again.',
                    confirmButtonColor: '#3085d6',
                    timer: 5000,
                    timerProgressBar: true
                }).then(() => {
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                });
            }
        });

        // Back button functionality
        function goBack() {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Any unsaved changes will be lost.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, go back',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/admin/offers';
                }
            });
        }

        // Set minimum date to today
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const todayFormatted = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
        validFrom.min = todayFormatted;
        validUpto.min = todayFormatted;

        // Update minimum date for validUpto
        validFrom.addEventListener('change', function() {
            validUpto.min = this.value;
            if (validUpto.value) {
                validateField(validUpto);
            }
        });
    </script>
</body>
</html>