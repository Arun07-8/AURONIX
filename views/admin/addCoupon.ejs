<%-include("../../views/partials/admin/header")%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Add New Coupon</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <!-- SweetAlert2 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #f8fafc;
            --text-color: #1e293b;
            --muted-color: #64748b;
            --border-color: #e2e8f0;
            --danger-color: #ef4444;
            --blue-shadow: rgba(99, 102, 241, 0.3);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--secondary-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .navbar {
            background: white;
            box-shadow: 0 4px 12px var(--blue-shadow);
            padding: 1rem 0;
        }

        .navbar-brand {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-color) !important;
        }

        .admin-profile {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--text-color);
        }

        .admin-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }

        .main-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .form-card {
            background: white;
            border-radius: 15px;
            box-shadow: 0 12px 40px var(--blue-shadow);
            padding: 2.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--border-color);
        }

        .card-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border-color);
        }

        .form-label {
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 0.5rem;
        }

        .form-control {
            border: none;
            border-radius: 12px;
            padding: 0.85rem 1rem;
            font-size: 1rem;
            background-color: white;
            box-shadow: 0 6px 15px var(--blue-shadow);
            transition: all 0.3s ease;
            width: 100%;
            max-width: 100%;
            box-sizing: border-box;
        }

        .form-control:focus {
            border: 2px solid var(--primary-color);
            box-shadow: 0 0 0 0.3rem var(--blue-shadow);
            transform: translateY(-1px);
        }

        .form-control.is-invalid {
            border: 2px solid var(--danger-color);
            box-shadow: 0 0 0 0.3rem rgba(239, 68, 68, 0.2);
        }

        .form-control::placeholder {
            color: var(--muted-color);
        }

        textarea.form-control {
            resize: vertical;
            min-height: 120px;
        }

        #couponCode {
            text-transform: uppercase;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color) 0%, #8b5cf6 100%);
            border: none;
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--blue-shadow);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px var(--blue-shadow);
        }

        .btn-secondary {
            background-color: #6c757d;
            border: none;
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
            transform: translateY(-1px);
        }

        .validation-message {
            color: var(--danger-color);
            font-size: 0.875rem;
            margin-top: 0.5rem;
            margin-left: 2.5rem;
            width: calc(100% - 2.5rem);
            font-weight: 500;
            min-height: 1.5rem;
        }

        .validation-message.checking {
            color: #6b7280;
            font-style: italic;
        }

        .validation-message[style*="display: block"] {
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .row {
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }

        .icon-input, .amount-input {
            position: relative;
            width: 100%;
            max-width: 100%;
        }

        .icon-input i, .amount-input span {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--muted-color);
            z-index: 10;
        }

        .icon-input .form-control, .amount-input .form-control {
            padding-left: 2.5rem;
        }

        .date-input input[type="text"] {
            color: var(--text-color);
        }

        .row .col-md-6 .form-group {
            padding: 0 0.5rem;
        }

        .row .col-md-6 .validation-message {
            margin-left: 2.5rem;
            width: calc(100% - 2.5rem);
        }

        @media (max-width: 768px) {
            .form-card {
                padding: 1.5rem;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
            }

            .form-control, .icon-input, .amount-input {
                max-width: 100%;
            }

            .validation-message {
                margin-left: 0;
                width: 100%;
            }
            
            .row .col-md-6 .validation-message {
                margin-left: 0;
                width: 100%;
            }

            .row .col-md-6 .form-group {
                padding: 0;
            }
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-tachometer-alt me-2"></i>
                Admin Dashboard
            </a>
            <div class="admin-profile">
                <div class="admin-avatar">A</div>
                <span class="fw-semibold">Admin</span>
                <i class="fas fa-chevron-down ms-2"></i>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-container">
        <div class="form-card animate-fade-in">
            <h2 class="card-title">
                <i class="fas fa-plus-circle me-2" style="color: var(--primary-color);"></i>
                Add New Coupon
            </h2>
            
            <form id="couponForm" novalidate>
                <!-- Coupon Name -->
                <div class="form-group">
                    <label for="couponName" class="form-label">Coupon Name</label>
                    <div class="icon-input">
                        <i class="fas fa-tag"></i>
                        <input type="text" class="form-control" id="couponName"  aria-describedby="couponNameError" required>
                        <div id="couponNameError" class="validation-message" role="alert" style="display: none;"></div>
                    </div>
                </div>

                <!-- Coupon Code -->
                <div class="form-group">
                    <label for="couponCode" class="form-label">Coupon Code</label>
                    <div class="icon-input">
                        <i class="fas fa-code"></i>
                        <input type="text" class="form-control" id="couponCode"  aria-describedby="couponCodeError" required>
                        <div id="couponCodeError" class="validation-message" role="alert" style="display: none;"></div>
                    </div>
                </div>

                <!-- Description -->
                <div class="form-group">
                    <label for="description" class="form-label">Coupon Description</label>
                    <div class="icon-input">
                        <textarea class="form-control" id="description" rows="4" aria-describedby="descriptionError" required></textarea>
                        <div id="descriptionError" class="validation-message" role="alert" style="display: none;"></div>
                    </div>
                </div>

                <!-- Date Row -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="createdDate" class="form-label">Created On</label>
                            <div class="date-input icon-input">
                                <i class="fas fa-calendar-alt"></i>
                                <input type="text" class="form-control" id="createdDate"  value="17/06/2025" aria-describedby="createdDateError" required>
                                <div id="createdDateError" class="validation-message" role="alert" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="expiryDate" class="form-label">Expires On</label>
                            <div class="date-input icon-input">
                                <i class="fas fa-calendar-alt"></i>
                                <input type="text" class="form-control" id="expiryDate" aria-describedby="expiryDateError" required>
                                <div id="expiryDateError" class="validation-message" role="alert" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Price Row -->
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="offerPrice" class="form-label">Discount Amount</label>
                            <div class="icon-input amount-input">
                                <span style="position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: var(--muted-color); z-index: 10;">₹</span>
                                <input type="number" class="form-control" id="offerPrice"  min="0" step="0.01" aria-describedby="offerPriceError" required>
                                <div id="offerPriceError" class="validation-message" role="alert" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="minPurchase" class="form-label">Minimum Purchase Amount</label>
                            <div class="icon-input amount-input">
                                <span style="position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: var(--muted-color); z-index: 10;">₹</span>
                                <input type="number" class="form-control" id="minPurchase" min="0" step="0.01" aria-describedby="minPurchaseError" required>
                                <div id="minPurchaseError" class="validation-message" role="alert" style="display: none;"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- General Validation Message -->
                <div id="validationMessage" class="validation-message" role="alert" style="display: none;"></div>

                <!-- Buttons -->
                <div class="button-group">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>
                        Add Coupon
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="goBack()">
                        <i class="fas fa-arrow-left me-2"></i>
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Strong date validation
        function validateDateFormat(dateStr) {
            const regex = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/(20\d{2})$/;
            if (!regex.test(dateStr)) return false;

            const [day, month, year] = dateStr.split('/').map(Number);
            const date = new Date(year, month - 1, day);
            return date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year;
        }

        // Parse DD/MM/YYYY to Date object
        function parseDate(dateStr) {
            const [day, month, year] = dateStr.split('/').map(Number);
            return new Date(year, month - 1, day);
        }

        // Coupon code validation (synchronous format check)
        function validateCouponCodeFormat(code) {
            const regex = /^[A-Z0-9]{6,12}$/;
            return regex.test(code);
        }

        // Coupon code validation
        function validateCouponCode(code, errorElement) {
            if (!code) {
                errorElement.textContent = 'Coupon code is required';
                errorElement.style.display = 'block';
                return false;
            }

            const upperCode = code.toUpperCase();
            if (!validateCouponCodeFormat(upperCode)) {
                errorElement.textContent = 'Coupon code must be 6-12 uppercase letters or numbers';
                errorElement.style.display = 'block';
                return false;
            }

            errorElement.style.display = 'none';
            return true;
        }

        // Description validation
        function validateDescription(desc) {
            return desc.length >= 10 && desc.length <= 200;
        }

        // Clear all errors and invalid states
        function clearErrors() {
            document.querySelectorAll('.validation-message').forEach(error => {
                error.textContent = '';
                error.style.display = 'none';
                error.classList.remove('checking');
            });
            document.querySelectorAll('.form-control').forEach(input => {
                input.classList.remove('is-invalid');
                input.removeAttribute('aria-describedby');
            });
        }

        // Validate field (for non-async validations)
        function validateField(fieldId, errorId, validationFn, errorMessage) {
            const field = document.getElementById(fieldId);
            const error = document.getElementById(errorId);
            const value = field.value.trim();

            let isValid = true;
            let message = errorMessage;

            if (!value) {
                message = `${fieldId.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} is required`;
                isValid = false;
            } else if (!validationFn(value)) {
                isValid = false;
            }

            if (!isValid) {
                error.textContent = message;
                error.style.display = 'block';
                field.classList.add('is-invalid');
                field.setAttribute('aria-describedby', errorId);
            } else {
                error.style.display = 'none';
                field.classList.remove('is-invalid');
                field.removeAttribute('aria-describedby');
            }

            return isValid;
        }

        // Validate coupon code field
        function validateCouponCodeField() {
            const field = document.getElementById('couponCode');
            const error = document.getElementById('couponCodeError');
            const value = field.value.trim();

            const isValid = validateCouponCode(value, error);
            if (!isValid) {
                field.classList.add('is-invalid');
                field.setAttribute('aria-describedby', 'couponCodeError');
            } else {
                field.classList.remove('is-invalid');
                field.removeAttribute('aria-describedby');
                field.value = value.toUpperCase();
            }
            return isValid;
        }

        // Price validation
        function validatePrices() {
            const offerPrice = parseFloat(document.getElementById('offerPrice').value) || 0;
            const minPurchase = parseFloat(document.getElementById('minPurchase').value) || 0;
            const validationMessage = document.getElementById('validationMessage');
            const offerPriceError = document.getElementById('offerPriceError');
            const minPurchaseError = document.getElementById('minPurchaseError');
            const offerPriceInput = document.getElementById('offerPrice');
            const minPurchaseInput = document.getElementById('minPurchase');

            let isValid = true;
            let errors = [];

            if (!offerPrice || isNaN(offerPrice)) {
                offerPriceError.textContent = 'Discount amount is required';
                offerPriceError.style.display = 'block';
                offerPriceInput.classList.add('is-invalid');
                offerPriceInput.setAttribute('aria-describedby', 'offerPriceError');
                errors.push('Discount amount is required');
                isValid = false;
            } else if (offerPrice <= 1000) {
                offerPriceError.textContent = 'Discount amount must be greater than ₹1000';
                offerPriceError.style.display = 'block';
                offerPriceInput.classList.add('is-invalid');
                offerPriceInput.setAttribute('aria-describedby', 'offerPriceError');
                errors.push('Discount amount must be greater than ₹1000');
                isValid = false;
            } else if (offerPrice > 10000) {
                offerPriceError.textContent = 'Discount amount cannot exceed ₹100,00';
                offerPriceError.style.display = 'block';
                offerPriceInput.classList.add('is-invalid');
                offerPriceInput.setAttribute('aria-describedby', 'offerPriceError');
                errors.push('Discount amount cannot exceed ₹100,000');
                isValid = false;
            } else {
                offerPriceError.style.display = 'none';
                offerPriceInput.classList.remove('is-invalid');
                offerPriceInput.removeAttribute('aria-describedby');
            }

            if (!minPurchase || isNaN(minPurchase)) {
                minPurchaseError.textContent = 'Minimum purchase amount is required';
                minPurchaseError.style.display = 'block';
                minPurchaseInput.classList.add('is-invalid');
                minPurchaseInput.setAttribute('aria-describedby', 'minPurchaseError');
                errors.push('Minimum purchase amount is required');
                isValid = false;
            } else if (minPurchase <= 20000) {
                minPurchaseError.textContent = 'Minimum purchase amount must be greater than ₹20,000';
                minPurchaseError.style.display = 'block';
                minPurchaseInput.classList.add('is-invalid');
                minPurchaseInput.setAttribute('aria-describedby', 'minPurchaseError');
                errors.push('Minimum purchase amount must be greater than ₹20,000');
                isValid = false;
            } else if (minPurchase > 1000000) {
                minPurchaseError.textContent = 'Minimum purchase cannot exceed ₹1,000,000';
                minPurchaseError.style.display = 'block';
                minPurchaseInput.classList.add('is-invalid');
                minPurchaseInput.setAttribute('aria-describedby', 'minPurchaseError');
                errors.push('Minimum purchase cannot exceed ₹1,000,000');
                isValid = false;
            } else {
                minPurchaseError.style.display = 'none';
                minPurchaseInput.classList.remove('is-invalid');
                minPurchaseInput.removeAttribute('aria-describedby');
            }

            if (minPurchase > 0 && offerPrice > minPurchase * 0.3) {
                validationMessage.textContent = `Discount amount cannot exceed 30% of minimum purchase (₹${(minPurchase * 0.3).toFixed(2)})`;
                validationMessage.style.display = 'block';
                offerPriceInput.classList.add('is-invalid');
                minPurchaseInput.classList.add('is-invalid');
                offerPriceInput.setAttribute('aria-describedby', 'validationMessage');
                minPurchaseInput.setAttribute('aria-describedby', 'validationMessage');
                errors.push(`Discount amount cannot exceed 30% of minimum purchase`);
                isValid = false;
            } else if (isValid) {
                validationMessage.style.display = 'none';
            }

            return { isValid, errors };
        }

        // Initialize Flatpickr for date inputs
        flatpickr('#createdDate', {
            dateFormat: 'd/m/Y',
            defaultDate: '17/06/2025',
            maxDate: 'today',
            enableTime: false,
            allowInput: true,
            onClose: function(selectedDates, dateStr, instance) {
                validateField(
                    'createdDate',
                    'createdDateError',
                    validateDateFormat,
                    'Please enter a valid date (DD/MM/YYYY)'
                );
            }
        });

        flatpickr('#expiryDate', {
            dateFormat: 'd/m/Y',
            minDate: new Date().fp_incr(1),
            enableTime: false,
            allowInput: true,
            onClose: function(selectedDates, dateStr, instance) {
                validateField(
                    'expiryDate',
                    'expiryDateError',
                    value => {
                        if (!validateDateFormat(value)) return false;
                        const createdDate = parseDate(document.getElementById('createdDate').value);
                        const expiryDate = parseDate(value);
                        return expiryDate > createdDate;
                    },
                    'Expiry date must be valid and after created date'
                );
            }
        });

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Form validation and submission
        document.getElementById('couponForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            clearErrors();

            let isValid = true;
            let errors = [];

            // Validate all fields
            const couponNameValid = validateField(
                'couponName',
                'couponNameError',
                value => value.length >= 3 && value.length <= 50 && /^[A-Za-z0-9\s]+$/.test(value),
                'Coupon name must be 3-50 alphanumeric characters'
            );
            if (!couponNameValid) errors.push('Coupon name is invalid');

            const couponCodeValid = validateCouponCodeField();
            if (!couponCodeValid) errors.push('Coupon code is invalid');

            const descriptionValid = validateField(
                'description',
                'descriptionError',
                validateDescription,
                'Description must be 10-200 characters long'
            );
            if (!descriptionValid) errors.push('Description is invalid');

            const createdDateValid = validateField(
                'createdDate',
                'createdDateError',
                validateDateFormat,
                'Please enter a valid date (DD/MM/YYYY)'
            );
            if (!createdDateValid) errors.push('Created date is invalid');

            const expiryDateValid = validateField(
                'expiryDate',
                'expiryDateError',
                value => {
                    if (!validateDateFormat(value)) return false;
                    const createdDate = parseDate(document.getElementById('createdDate').value);
                    const expiryDate = parseDate(value);
                    return expiryDate > createdDate;
                },
                'Expiry date must be valid and after created date'
            );
            if (!expiryDateValid) errors.push('Expiry date is invalid');

            const priceValidation = validatePrices();
            if (!priceValidation.isValid) {
                errors = errors.concat(priceValidation.errors);
            }

            isValid = couponNameValid && couponCodeValid && descriptionValid && createdDateValid && expiryDateValid && priceValidation.isValid;

            if (isValid) {
                const couponData = {
                    couponName: document.getElementById('couponName').value.trim(),
                    couponCode: document.getElementById('couponCode').value.trim().toUpperCase(),
                    description: document.getElementById('description').value.trim(),
                    createdDate: document.getElementById('createdDate').value,
                    expiryDate: document.getElementById('expiryDate').value,
                    offerPrice: parseFloat(document.getElementById('offerPrice').value),
                    minPurchase: parseFloat(document.getElementById('minPurchase').value)
                };

                try {
                    const response = await fetch('/admin/addcoupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(couponData)
                    });
                    const data = await response.json();
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message || 'Coupon added successfully!',
                            confirmButtonColor: '#6366f1'
                        }).then(() => {
                            clearErrors();
                          window.location.href="/admin/coupon"
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to add coupon. Please try again.',
                            confirmButtonColor: '#6366f1'
                        });
                    }
                } catch (error) {
                    console.error('Error submitting coupon:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        confirmButtonColor: '#6366f1'
                    });
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    html: `Please fix the following errors:<ul>${errors.map(err => `<li>${err}</li>`).join('')}</ul>`,
                    confirmButtonColor: '#6366f1'
                });
            }
        });

        // Real-time validation events
        document.getElementById('couponName').addEventListener('input', debounce(() => {
            validateField(
                'couponName',
                'couponNameError',
                value => value.length >= 3 && value.length <= 50 && /^[A-Za-z0-9\s]+$/.test(value),
                'Coupon name must be 3-50 alphanumeric characters'
            );
        }, 300));

        document.getElementById('couponCode').addEventListener('input', debounce(() => {
            const field = document.getElementById('couponCode');
            field.value = field.value.toUpperCase();
            validateCouponCodeField();
        }, 500));

        document.getElementById('description').addEventListener('input', debounce(() => {
            validateField(
                'description',
                'descriptionError',
                validateDescription,
                'Description must be 10-200 characters long'
            );
        }, 300));

        document.getElementById('offerPrice').addEventListener('input', debounce(() => {
            validatePrices();
        }, 300));

        document.getElementById('minPurchase').addEventListener('input', debounce(() => {
            validatePrices();
        }, 300));

        // Format date input
        ['createdDate', 'expiryDate'].forEach(id => {
            const input = document.getElementById(id);
            input.addEventListener('input', function(e) {
                let value = e.target.value.replace(/[^0-9/]/g, '');
                if (value.length === 2 || value.length === 5) {
                    value += '/';
                }
                e.target.value = value.slice(0, 10);
                validateField(
                    id,
                    `${id}Error`,
                    validateDateFormat,
                    'Please enter a valid date (DD/MM/YYYY)'
                );
            });
        });

        function goBack() {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Any unsaved changes will be lost.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#6366f1',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.history.back();
                }
            });
        }
    </script>
</body>
</html>