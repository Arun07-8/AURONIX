<%- include("../../views/partials/admin/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
    <link href="/css/admin-css/dashboard.css"  rel="stylesheet">
    <style>
        .chart-container { position: relative; height: 300px; }
        .legend-dot { width: 12px; height: 12px; border-radius: 50%; display: inline-block; }
        .error-message { color: red; font-size: 0.9em; display: none; }
        .custom-date-fields.active { display: flex; }
        .custom-date-fields { display: none; }
    </style>
</head>
<body>
<div class="main-content" id="mainContent">
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid px-4">
            <div class="d-flex align-items-center">
                <button class="sidebar-toggle me-3" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <a class="navbar-brand" href="#">Admin Dashboard</a>
            </div>
            <div class="navbar-nav ms-auto">
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown">
                        <div class="user-avatar me-2">A</div>
                        <span class="fw-medium">Admin</span>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#"><i class="fas fa-user me-2"></i>Profile</a></li>
                        <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Settings</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="container-fluid px-4 py-4">
        <div class="mb-4">
            <h2 class="section-title">Dashboard Overview</h2>
            <div class="filter-section">
                <div class="row g-3">
                    <div class="col-md-2">
                        <label class="form-label fw-medium">Time Period</label>
                        <select class="form-select time-period" id="timePeriod">
                            <option value="all">All Times</option>
                            <option value="yesterday">Yesterday</option>
                            <option value="today">Today</option>
                            <option value="last7days">Last 7 Days</option>
                            <option value="last30days">Last 30 Days</option>
                            <option value="thisyear">This Year</option>
                            <option value="custom">Custom Range</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label fw-medium">Order Status</label>
                        <select class="form-select" id="orderStatus">
                            <option value="all">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Processing">Processing</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                            <option value="Return Requested">Return Requested</option>
                            <option value="Returned">Returned</option>
                            <option value="Return Rejected">Return Rejected</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex align-items-end gap-2" style="width: 373px;">
                        <button class="btn btn-primary w-100" id="applyFilters">Apply Filters</button>
                        <button class="btn btn-secondary w-100" id="clearFilters" style="height: 50px;">Clear Filters</button>
                    </div>
                    <div class="custom-date-fields" id="customDateFields">
                        <div class="col-md-2">
                            <label class="form-label fw-medium">Start Date <span class="required">*</span></label>
                            <input type="text" class="form-control flatpickr" id="startDate" placeholder="Select date">
                            <div class="error-message" id="startDateError">Invalid date format</div>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label fw-medium">End Date <span class="required">*</span></label>
                            <input type="text" class="form-control flatpickr" id="endDate" placeholder="Select date">
                            <div class="error-message" id="endDateError">Invalid date format</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4 mb-4" id="statsSection">
                <div class="col-xl-3 col-md-6">
                    <div class="stat-card">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <p class="stat-label">Total Customers</p>
                                <h3 class="stat-number" id="totalCustomers">0</h3>
                            </div>
                            <div class="stat-icon icon-customers">
                                <i class="fas fa-users"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6">
                    <div class="stat-card">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <p class="stat-label">Total Revenue</p>
                                <h3 class="stat-number" id="totalRevenue">â‚¹0.00</h3>
                            </div>
                            <div class="stat-icon icon-revenue">
                                <i class="fas fa-dollar-sign"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6">
                    <div class="stat-card">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <p class="stat-label">Total Orders</p>
                                <h3 class="stat-number" id="totalOrders">0</h3>
                            </div>
                            <div class="stat-icon icon-orders">
                                <i class="fas fa-shopping-cart"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xl-3 col-md-6">
                    <div class="stat-card">
                        <div class="d-flex align-items-center justify-content-between">
                            <div>
                                <p class="stat-label">Total Products</p>
                                <h3 class="stat-number" id="totalProducts">0</h3>
                            </div>
                            <div class="stat-icon icon-products">
                                <i class="fas fa-box"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-8">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title fw-bold mb-3">Revenue Overview</h5>
                        <div class="chart-legend">
                            <div class="legend-item">
                                <div class="legend-dot" style="background-color: #8b5cf6;"></div>
                                <span>Revenue</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-dot" style="background-color: #10b981;"></div>
                                <span>Orders</span>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="revenueChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title fw-bold mb-3">Order Status</h5>
                        <div class="chart-container">
                            <canvas id="orderStatusChart"></canvas>
                        </div>
                        <div class="mt-3" id="orderStatusLegend"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-6">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title fw-bold mb-3">Payment Methods</h5>
                        <div class="chart-container">
                            <canvas id="paymentChart"></canvas>
                        </div>
                        <div class="mt-3" id="paymentMethodLegend"></div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card h-100 top-categories-card">
                    <div class="card-body">
                        <h5 class="card-title fw-bold mb-3">Top Categories</h5>
                        <div class="chart-container">
                            <canvas id="categoriesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card h-100 top-brands-card">
                    <div class="card-body">
                        <h5 class="card-title fw-bold mb-3">Top Brands</h5>
                        <div class="chart-container">
                            <canvas id="brandsChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card top-selling-card">
                    <div class="card-header bg-white">
                        <h5 class="card-title fw-bold mb-0">Top Selling Products</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0" id="topSellingProductsTable">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Quantity</th>
                                        <th>Sales</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4">
            <div class="col-lg-12">
                <div class="card recent-orders-card">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center">
                        <h5 class="card-title fw-bold mb-0">Recent Orders</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-container">
                            <table class="orders-table recent-orders-table" id="recentOrdersTable">
                                <thead class="table-header">
                                    <tr>
                                        <th>Order ID</th>
                                        <th>Customer Name</th>
                                        <th>Order Date</th>
                                        <th>Total Amount</th>
                                        <th>Payment Method</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="pagination-container">
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center" id="pagination"></ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
// Chart instances
let revenueChartInstance, orderStatusChartInstance, paymentChartInstance, categoriesChartInstance, brandsChartInstance;

// Color palette
const chartColors = {
    primary: '#8b5cf6',
    success: '#10b981',
    warning: '#f59e0b',
    info: '#3b82f6',
    orange: '#FF9500',
    blue: '#007AFF',
    green: '#34C759',
    teal: '#00C896',
    red: '#FF3B30',
    yellow: '#FFCC02',
    gray: '#8E8E93',
    pink: '#FF2D92',
};

// Initialize Flatpickr for date pickers
flatpickr(".flatpickr", {
    dateFormat: "d/m/Y",
    maxDate: "today",
    allowInput: true,
    onChange: function(selectedDates, dateStr, instance) {
        instance.element.value = dateStr;
    }
});

// Function to validate date format (DD/MM/YYYY)
function validateDate(dateStr) {
    const regex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
    if (!regex.test(dateStr)) return false;
    const [day, month, year] = dateStr.split('/').map(Number);
    const date = new Date(year, month - 1, day);
    return date.getDate() === day && date.getMonth() === month - 1 && date.getFullYear() === year;
}

// Function to convert DD/MM/YYYY to ISO date (YYYY-MM-DD)
function toISODate(dateStr) {
    if (!dateStr) return '';
    const [day, month, year] = dateStr.split('/').map(Number);
    return new Date(year, month - 1, day).toISOString().split('T')[0];
}

// Function to format date for display
function formatDateForDisplay(dateStr) {
    if (!dateStr) return '';
    if (dateStr.includes('-')) {
        const [year, month, day] = dateStr.split('-');
        return `${day}/${month}/${year}`;
    }
    return dateStr; // For monthly data (e.g., "January 2023")
}

// Function to create heartbeat-like data
function createHeartbeatData(data, isDaily) {
    const heartbeatData = [];
    const labels = [];
    data.forEach((item, index) => {
        const value = item.revenue || item.orderCount || 0;
        const label = item.label;
        // Add main data point
        heartbeatData.push(value);
        labels.push(label);
        // Add intermediate point to create heartbeat effect
        if (index < data.length - 1) {
            heartbeatData.push(value * 0.8); // Slight dip for heartbeat effect
            labels.push(label + ' '); // Space to differentiate intermediate point
        }
    });
    return { data: heartbeatData, labels };
}

// Function to update charts and tables with new data
function updateDashboard(data) {
    // Update Stats
    document.getElementById('totalCustomers').textContent = data.count || 0;
    document.getElementById('totalRevenue').textContent = `â‚¹${(data.totalRevenue || 0).toFixed(2)}`;
    document.getElementById('totalOrders').textContent = data.orderCount || 0;
    document.getElementById('totalProducts').textContent = data.productCount || 0;

    // Update Revenue Chart
    if (revenueChartInstance) revenueChartInstance.destroy();
    const revenueCtx = document.getElementById('revenueChart').getContext('2d');
    const chartContainer = revenueCtx.canvas.parentElement;

    // Validate revenue data
    const revenueData = Array.isArray(data.revenueData) ? data.revenueData.filter(item => item && item._id) : [];

    // Define month order for sorting
    const monthOrder = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];

    // Format and sort revenue data
    const isDailyData = revenueData.some(item => item._id.includes('-'));
    const sortedRevenueData = revenueData
        .map(item => {
            let label, sortKey;
            if (isDailyData) {
                label = formatDateForDisplay(item._id);
                sortKey = new Date(item._id).getTime();
            } else {
                const [month, year] = item._id.split(' ');
                label = `${month} ${year}`;
                sortKey = new Date(`${month} 1, ${year}`).getTime();
            }
            return { ...item, label, sortKey };
        })
        .sort((a, b) => a.sortKey - b.sortKey);

    // Handle empty data
    if (sortedRevenueData.length === 0) {
        chartContainer.innerHTML = '<p class="text-center text-muted">No data available for the selected period</p>';
        return;
    } else if (!revenueCtx.canvas) {
        chartContainer.innerHTML = '<canvas id="revenueChart"></canvas>';
        revenueCtx = document.getElementById('revenueChart').getContext('2d');
    }

    // Create heartbeat-like data for revenue and orders
    const revenueHeartbeat = createHeartbeatData(sortedRevenueData.map(item => ({ ...item, revenue: item.revenue })), isDailyData);
    const ordersHeartbeat = createHeartbeatData(sortedRevenueData.map(item => ({ ...item, orderCount: item.orderCount })), isDailyData);

    revenueChartInstance = new Chart(revenueCtx, {
        type: 'line',
        data: {
            labels: revenueHeartbeat.labels,
            datasets: [
                {
                    label: 'Revenue',
                    data: revenueHeartbeat.data,
                    borderColor: chartColors.primary,
                    backgroundColor: chartColors.primary + '20',
                    tension: 0, // No smoothing for sharp heartbeat effect
                    borderWidth: 3,
                    pointBackgroundColor: chartColors.primary,
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2,
                    pointRadius: revenueHeartbeat.data.length > 1 ? 4 : 0,
                    pointHoverRadius: 6,
                },
                {
                    label: 'Orders',
                    data: ordersHeartbeat.data,
                    borderColor: chartColors.success,
                    backgroundColor: chartColors.success + '20',
                    tension: 0, // No smoothing for sharp heartbeat effect
                    borderWidth: 3,
                    pointBackgroundColor: chartColors.success,
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2,
                    pointRadius: ordersHeartbeat.data.length > 1 ? 4 : 0,
                    pointHoverRadius: 6,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            const label = context.dataset.label || '';
                            const value = context.parsed.y;
                            return `${label}: ${label === 'Revenue' ? 'â‚¹' + value.toFixed(2) : value}`;
                        },
                    },
                },
            },
            scales: {
                x: {
                    grid: { display: false },
                    ticks: {
                        color: '#64748b',
                        maxRotation: revenueHeartbeat.labels.length > 20 ? 45 : 0,
                        minRotation: revenueHeartbeat.labels.length > 20 ? 45 : 0,
                        maxTicksLimit: 12,
                    },
                },
                y: {
                    grid: { color: '#f1f5f9' },
                    ticks: {
                        color: '#64748b',
                        callback: function (value) {
                            return value;
                        },
                    },
                    beginAtZero: true,
                },
            },
        },
    });

    // Update Order Status Chart
    if (orderStatusChartInstance) orderStatusChartInstance.destroy();
    const orderStatusCtx = document.getElementById('orderStatusChart').getContext('2d');
    orderStatusChartInstance = new Chart(orderStatusCtx, {
        type: 'doughnut',
        data: {
            labels: Array.isArray(data.orderStatusData) ? data.orderStatusData.map(item => item._id) : [],
            datasets: [
                {
                    data: Array.isArray(data.orderStatusData) ? data.orderStatusData.map(item => item.count || 0) : [],
                    backgroundColor: [
                        chartColors.orange,
                        chartColors.blue,
                        chartColors.green,
                        chartColors.teal,
                        chartColors.red,
                        chartColors.yellow,
                        chartColors.gray,
                    ].slice(0, data.orderStatusData?.length || 0),
                    borderWidth: 0,
                    cutout: '70%',
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
        },
    });

    const orderStatusLegend = document.getElementById('orderStatusLegend');
    orderStatusLegend.innerHTML = Array.isArray(data.orderStatusData)
        ? data.orderStatusData
              .map(
                  (status, index) => `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        <div class="legend-dot me-2" style="background-color: ${
                            ['#FF9500', '#007AFF', '#34C759', '#00C896', '#FF3B30', '#FFCC02', '#8E8E93'][index]
                        };"></div>
                        <small>${status._id || 'Unknown'}</small>
                    </div>
                    <small class="fw-bold">${status.count || 0}</small>
                </div>
            `
              )
              .join('')
        : '<p class="text-center text-muted">No order status data available</p>';

    // Update Payment Methods Chart
    if (paymentChartInstance) paymentChartInstance.destroy();
    const paymentCtx = document.getElementById('paymentChart').getContext('2d');
    paymentChartInstance = new Chart(paymentCtx, {
        type: 'doughnut',
        data: {
            labels: Array.isArray(data.paymentMethodData) ? data.paymentMethodData.map(item => item._id) : [],
            datasets: [
                {
                    data: Array.isArray(data.paymentMethodData) ? data.paymentMethodData.map(item => item.count || 0) : [],
                    backgroundColor: [chartColors.primary, chartColors.success, chartColors.warning].slice(
                        0,
                        data.paymentMethodData?.length || 0
                    ),
                    borderWidth: 0,
                    cutout: '70%',
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
        },
    });

    const paymentMethodLegend = document.getElementById('paymentMethodLegend');
    const totalPayments = Array.isArray(data.paymentMethodData)
        ? data.paymentMethodData.reduce((sum, m) => sum + (m.count || 0), 0)
        : 0;
    paymentMethodLegend.innerHTML = Array.isArray(data.paymentMethodData)
        ? data.paymentMethodData
              .map(
                  (method, index) => `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex align-items-center">
                        <div class="legend-dot me-2" style="background-color: ${
                            ['#8B5CF6', '#10B981', '#F59E0B'][index]
                        };"></div>
                        <small>${method._id || 'Unknown'}</small>
                    </div>
                    <small class="fw-bold">${totalPayments ? ((method.count / totalPayments) * 100).toFixed(0) : 0}%</small>
                </div>
            `
              )
              .join('')
        : '<p class="text-center text-muted">No payment method data available</p>';

    // Update Top Categories Chart
    if (categoriesChartInstance) categoriesChartInstance.destroy();
    const categoriesCtx = document.getElementById('categoriesChart').getContext('2d');
    categoriesChartInstance = new Chart(categoriesCtx, {
        type: 'bar',
        data: {
            labels: Array.isArray(data.topCategories) ? data.topCategories.map(item => item.categoryName || 'Unknown') : [],
            datasets: [
                {
                    data: Array.isArray(data.topCategories) ? data.topCategories.map(item => item.totalSales || 0) : [],
                    backgroundColor: chartColors.primary,
                    borderRadius: 6,
                    borderSkipped: false,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
            scales: {
                x: { grid: { display: false }, ticks: { color: '#64748b' } },
                y: { grid: { color: '#f1f5f9' }, ticks: { color: '#64748b' } },
            },
        },
    });

    // Update Top Brands Chart
    if (brandsChartInstance) brandsChartInstance.destroy();
    const brandsCtx = document.getElementById('brandsChart').getContext('2d');
    brandsChartInstance = new Chart(brandsCtx, {
        type: 'bar',
        data: {
            labels: Array.isArray(data.topBrands) ? data.topBrands.map(item => item.brandName || 'Unknown') : [],
            datasets: [
                {
                    data: Array.isArray(data.topBrands) ? data.topBrands.map(item => item.totalSales || 0) : [],
                    backgroundColor: chartColors.primary,
                    borderRadius: 6,
                    borderSkipped: false,
                },
            ],
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: { legend: { display: false } },
            scales: {
                x: { grid: { display: false }, ticks: { color: '#64748b' } },
                y: { grid: { color: '#f1f5f9' }, ticks: { color: '#64748b' } },
            },
        },
    });

    // Update Top Selling Products Table
    const topSellingProductsTable = document.querySelector('#topSellingProductsTable tbody');
    topSellingProductsTable.innerHTML = Array.isArray(data.topSellingProducts)
        ? data.topSellingProducts
              .map(
                  product => `
                <tr>
                    <td>${product.productName || 'N/A'}</td>
                    <td class="fw-bold">${product.totalQuantity || 0}</td>
                    <td class="fw-bold">â‚¹${(product.totalSales || 0).toFixed(2)}</td>
                </tr>
            `
              )
              .join('')
        : '<tr><td colspan="3" class="text-center text-muted">No top selling products available</td></tr>';

    // Update Recent Orders Table
    const recentOrdersTable = document.querySelector('#recentOrdersTable tbody');
    recentOrdersTable.innerHTML = Array.isArray(data.recentOrders)
        ? data.recentOrders
              .map(
                  order => `
                <tr class="table-row">
                    <td class="table-cell">
                        <span class="order-id">${order.orderId || 'N/A'}</span>
                    </td>
                    <td class="table-cell">
                        <span class="customer-name">${order.shippingAddress?.name || order.userId?.name || 'Unknown'}</span>
                    </td>
                    <td class="table-cell">${order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-GB') : 'N/A'}</td>
                    <td class="table-cell">
                        <span class="amount">â‚¹${(order.finalAmount || 0).toFixed(2)}</span>
                    </td>
                    <td class="table-cell text-center">
                        <span class="payment-method ${order.paymentMethod?.toLowerCase().replace(' ', '-') || 'unknown'}">
                            ${order.paymentMethod || 'Unknown'}
                        </span>
                    </td>
                    <td class="table-cell text-center">
                        <span class="status ${order.orderedItems?.[0]?.status?.toLowerCase().replace(' ', '-') || 'pending'}">
                            ${order.orderedItems?.[0]?.status || 'Pending'}
                        </span>
                    </td>
                    <td class="table-cell text-center">
                        <button class="view-btn" onclick="viewOrderDetails('${order._id || ''}')">VIEW</button>
                    </td>
                </tr>
            `
              )
              .join('')
        : '<tr><td colspan="7" class="text-center text-muted">No recent orders available</td></tr>';

    // Update Pagination
    const pagination = document.getElementById('pagination');
    const timePeriod = document.getElementById('timePeriod').value;
    const orderStatus = document.getElementById('orderStatus').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    let paginationParams = `timePeriod=${encodeURIComponent(timePeriod)}&status=${encodeURIComponent(orderStatus)}`;
    if (timePeriod === 'custom' && startDate && endDate) {
        paginationParams += `&startDate=${encodeURIComponent(toISODate(startDate))}&endDate=${encodeURIComponent(toISODate(endDate))}`;
    }

    pagination.innerHTML = `
        <li class="page-item ${data.currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="?page=${data.currentPage - 1}&${paginationParams}">
                <i class="fas fa-chevron-left"></i>
            </a>
        </li>
        ${Array.from({ length: data.totalPages || 1 }, (_, i) => i + 1)
            .map(
                i => `
                <li class="page-item ${data.currentPage === i ? 'active' : ''}">
                    <a class="page-link" href="?page=${i}&${paginationParams}">${i}</a>
                </li>
            `
            )
            .join('')}
        <li class="page-item ${data.currentPage === (data.totalPages || 1) ? 'disabled' : ''}">
            <a class="page-link" href="?page=${data.currentPage + 1}&${paginationParams}">
                <i class="fas fa-chevron-right"></i>
            </a>
        </li>
    `;
}

// Initialize Dashboard
function initializeDashboard() {
    // Set default time period to 'all'
    const timePeriodSelect = document.getElementById('timePeriod');
    timePeriodSelect.value = 'all';
    document.getElementById('orderStatus').value = 'all';
    document.getElementById('customDateFields').classList.remove('active');
    document.getElementById('startDate').value = '';
    document.getElementById('endDate').value = '';
    document.getElementById('startDateError').style.display = 'none';
    document.getElementById('endDateError').style.display = 'none';

    // Fetch initial data
    fetchDashboardData('all', 'all');
}

// Fetch Dashboard Data
function fetchDashboardData(timePeriod, orderStatus, startDate = '', endDate = '') {
    const applyButton = document.getElementById('applyFilters');
    applyButton.disabled = true;
    applyButton.textContent = 'Loading...';

    const params = new URLSearchParams();
    params.append('timePeriod', timePeriod);
    params.append('status', orderStatus);
    if (timePeriod === 'custom' && startDate && endDate) {
        params.append('startDate', toISODate(startDate));
        params.append('endDate', toISODate(endDate));
    }

    fetch(`/admin/dashboard?${params.toString()}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
        },
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateDashboard(data);
            } else {
                alert(`Error loading data: ${data.message || 'Unknown error'}`);
            }
        })
        .catch(error => {
            console.error('Fetch Error:', error);
            alert('An error occurred while loading the dashboard data.');
        })
        .finally(() => {
            applyButton.disabled = false;
            applyButton.textContent = 'Apply Filters';
        });
}

// Handle Time Period Change
document.getElementById('timePeriod').addEventListener('change', function () {
    const customDateFields = document.getElementById('customDateFields');
    if (this.value === 'custom') {
        customDateFields.classList.add('active');
    } else {
        customDateFields.classList.remove('active');
        document.getElementById('startDateError').style.display = 'none';
        document.getElementById('endDateError').style.display = 'none';
        document.getElementById('startDate').value = '';
        document.getElementById('endDate').value = '';
    }
});

// Handle Apply Filters
document.getElementById('applyFilters').addEventListener('click', function () {
    const timePeriod = document.getElementById('timePeriod').value;
    const orderStatus = document.getElementById('orderStatus').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    if (timePeriod === 'custom') {
        if (!validateDate(startDate)) {
            document.getElementById('startDateError').style.display = 'block';
            document.getElementById('startDateError').textContent = 'Invalid date format (DD/MM/YYYY)';
            return;
        }
        if (!validateDate(endDate)) {
            document.getElementById('endDateError').style.display = 'block';
            document.getElementById('endDateError').textContent = 'Invalid date format (DD/MM/YYYY)';
            return;
        }
        document.getElementById('startDateError').style.display = 'none';
        document.getElementById('endDateError').style.display = 'none';
    }

    fetchDashboardData(timePeriod, orderStatus, startDate, endDate);
});

// Handle Clear Filters
document.getElementById('clearFilters').addEventListener('click', function () {
    initializeDashboard();
});

// Handle Pagination Clicks
document.getElementById('pagination').addEventListener('click', function (e) {
    e.preventDefault();
    const target = e.target.closest('.page-link');
    if (!target || target.parentElement.classList.contains('disabled')) return;

    const url = new URL(target.href);
    const params = new URLSearchParams(url.search);
    const page = params.get('page');
    const timePeriod = document.getElementById('timePeriod').value;
    const orderStatus = document.getElementById('orderStatus').value;
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    if (timePeriod === 'custom') {
        if (!validateDate(startDate) || !validateDate(endDate)) {
            alert('Please enter valid dates in DD/MM/YYYY format.');
            return;
        }
    }

    params.set('timePeriod', timePeriod);
    params.set('status', orderStatus);
    if (timePeriod === 'custom' && startDate && endDate) {
        params.set('startDate', toISODate(startDate));
        params.set('endDate', toISODate(endDate));
    }

    fetch(`/admin/dashboard?${params.toString()}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
        },
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateDashboard(data);
            } else {
                alert(`Error fetching paginated data: ${data.message || 'Unknown error'}`);
            }
        })
        .catch(error => {
            console.error('Pagination Error:', error);
            alert('An error occurred while loading the page.');
        });
});

// View Order Details
function viewOrderDetails(orderId) {
    if (orderId) {
        window.location.href = `/admin/order-view/${orderId}`;
    } else {
        alert('Invalid order ID');
    }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', initializeDashboard);
</script>
</body>
</html>