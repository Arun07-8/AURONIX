<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management</title>
    <%- include("../../views/partials/admin/header") %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/admin-css/categoryManagement.css" type="text/css">
</head>
<body>
    <section>
        <div class="main-content" id="main-content">
            <!-- Admin profile at the top -->
            <div class="top-admin-bar">
                <div class="admin-profile">
                    <img src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=32&h=32&q=80"
                         alt="Admin Avatar">
                    <span>Admin Profile</span>
                </div>
            </div>

            <!-- Navbar with search -->
            <nav class="navbar navbar-expand-lg">
                <div class="container-fluid">
                    <div class="d-flex align-items-center flex-grow-1">
                        <span class="toggle-sidebar me-3" id="toggle-sidebar">
                            <i class="fas fa-bars"></i>
                        </span>
                        <div class="search-input-wrapper">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="search-input" id="searchInput" 
                                   placeholder="Search by category name..." 
                                   value="<%= search || '' %>"
                                   aria-label="Search categories"
                                   autocomplete="off">
                            <i class="fas fa-spinner fa-spin search-loading-icon" id="searchLoadingIcon" style="display: none;"></i>
                        </div>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <div class="search-buttons">
                            <button class="btn btn-search" onclick="triggerSearch()" aria-label="Search categories">
                                <i class="fas fa-search"></i> Search
                            </button>
                            <button class="btn btn-clear" onclick="clearSearch()" aria-label="Clear search">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                        <button class="add-button" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
                            <i class="bi bi-plus-circle"></i> New Category
                        </button>
                    </div>
                </div>
            </nav>

            <!-- Category management content -->
            <div class="category-management-container">
                <div class="page-heading">
                    <i class="fas fa-list"></i>
                    <h1>Category Management</h1>
                </div>

                <div class="table-container">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr class="table-header">
                                    <th>Category Name</th>
                                    <th>Description</th>
                                    <th>Last Updated</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (cat.length === 0) { %>
                                    <tr>
                                        <td colspan="5" style="text-align: center; padding: 2rem;">
                                            <div style="color: var(--text-secondary);">
                                                <i class="fas fa-search" style="font-size: 2rem; margin-bottom: 1rem;"></i>
                                                <p>No categories found matching your search criteria.</p>
                                            </div>
                                        </td>
                                    </tr>
                                <% } else { %>
                                    <% cat.reverse().forEach((category) => { %>
                                        <tr>
                                            <td><%= category.name %></td>
                                            <td><%= category.description %></td>
                                            <td>
                                                <%
                                                    const createdDate = new Date(category.createdAt);
                                                    const day = String(createdDate.getDate()).padStart(2, '0');
                                                    const month = String(createdDate.getMonth() + 1).padStart(2, '0');
                                                    const year = createdDate.getFullYear();
                                                %>
                                                <%= `${day}-${month}-${year}` %>
                                            </td>
                                            <td>
                                                <% if (category.isListed) { %>
                                                    <button class="btn-status btn-listed" onclick="handleListedCatClick('<%= category._id %>')" aria-label="Unlist category">Listed</button>
                                                <% } else { %>
                                                    <button class="btn-status btn-listed2" onclick="handleUnlistedCatClick('<%= category._id %>')" aria-label="List category">Unlisted</button>
                                                <% } %>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <button class="btn-action btn-edit" data-bs-toggle="modal" data-bs-target="#editCategoryModal" onclick="handleEditClick('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn-action btn-delete" onclick="handleSoftDeleteClick('<%= category._id %>')" aria-label="Soft delete category">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Pagination -->
                <div class="pagination-container">
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <% if (currentPage > 1) { %>
                                <li class="page-item">
                                    <a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= encodeURIComponent(search || '') %>" aria-label="Previous">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                            <% } else { %>
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        <i class="fas fa-chevron-left"></i>
                                    </span>
                                </li>
                            <% } %>

                            <% 
                            let startPage = Math.max(1, currentPage - 2);
                            let endPage = Math.min(totalPages, startPage + 4);
                            
                            if (endPage - startPage < 4 && totalPages > 5) {
                                startPage = Math.max(1, endPage - 4);
                            }
                            
                            for(let i = startPage; i <= endPage; i++) { %>
                                <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                                    <a class="page-link" href="?page=<%= i %>&search=<%= encodeURIComponent(search || '') %>"><%= i %></a>
                                </li>
                            <% } %>

                            <% if (currentPage < totalPages) { %>
                                <li class="page-item">
                                    <a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= encodeURIComponent(search || '') %>" aria-label="Next">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            <% } else { %>
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        <i class="fas fa-chevron-right"></i>
                                    </span>
                                </li>
                            <% } %>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </section>

    <!-- Add Category Modal -->
    <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCategoryModalLabel">
                        <i class="fas fa-folder-plus"></i> Add New Category
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form onsubmit="return handleFormSubmit(event)">
                    <div class="modal-body">
                        <div class="form-group mb-4">
                            <label for="categoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control classic-input" id="categoryName" name="categoryName" placeholder="Enter category name">
                            <span id="name-error" class="error-message" style="color: red; display: none; font-size: 0.9rem;"></span>
                        </div>
                        <div class="form-group mb-4">
                            <label for="categoryDescription" class="form-label">Category Description</label>
                            <textarea class="form-control classic-input" id="categoryDescription" name="categoryDescription" placeholder="Enter category description" rows="5"></textarea>
                            <span id="description-error" class="error-message" style="color: red; display: none; font-size: 0.9rem;"></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light btn-classic-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary btn-classic-primary">Add Category</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCategoryModalLabel">
                        <i class="fas fa-edit"></i> Edit Category
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editCategoryForm" onsubmit="return handleEditFormSubmit(event)">
                    <div class="modal-body">
                        <input type="hidden" id="editCategoryId" name="categoryId">
                        <div class="form-group mb-4">
                            <label for="editCategoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control classic-input" id="editCategoryName" name="categoryname" placeholder="Enter category name">
                            <span id="edit-name-error" class="error-message" style="color: red; display: none; font-size: 0.9rem;"></span>
                        </div>
                        <div class="form-group mb-4">
                            <label for="editCategoryDescription" class="form-label">Category Description</label>
                            <textarea class="form-control classic-input" id="editCategoryDescription" name="description" placeholder="Enter category description" rows="5"></textarea>
                            <span id="edit-description-error" class="error-message" style="color: red; display: none; font-size: 0.9rem;"></span>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light btn-classic-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary btn-classic-primary">Update Category</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Debounce function to limit search requests
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Trigger search with loading state
        async function triggerSearch() {
            const searchInput = document.getElementById('searchInput').value.trim();
            const loadingIcon = document.getElementById('searchLoadingIcon');
            loadingIcon.style.display = 'block';

            try {
                const url = new URL(window.location.href);
                url.searchParams.set('search', searchInput);
                url.searchParams.set('page', '1');
                window.location.href = url.toString();
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to perform search. Please try again.'
                });
            } finally {
                loadingIcon.style.display = 'none';
            }
        }

        // Clear search and reset
        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            const loadingIcon = document.getElementById('searchLoadingIcon');
            searchInput.value = '';
            loadingIcon.style.display = 'none';

            const url = new URL(window.location.href);
            url.searchParams.delete('search');
            url.searchParams.set('page', '1');
            window.location.href = url.toString();
        }

        // Search input event listeners
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('input', debounce(function () {
            if (this.value.length >= 2 || this.value.length === 0) {
                triggerSearch();
            }
        }, 500));

        searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                triggerSearch();
            }
        });

        // Form submission handlers
        function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) return false;

            const name = document.getElementById("categoryName").value.trim();
            const description = document.getElementById("categoryDescription").value.trim();

            fetch("/admin/addCategory", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, description })
            })
            .then(response => response.json().then(data => ({ ok: response.ok, status: response.status, data })))
            .then(({ ok, status, data }) => {
                if (!ok) throw new Error(data.error || `Failed to add category (Status: ${status})`);
                Swal.fire({
                    icon: 'success',
                    title: 'Category Added',
                    text: data.message || 'Category added successfully!',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
                    if (modal) modal.hide();
                    location.reload();
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while adding the category.'
                });
            });

            return false;
        }

        function handleEditFormSubmit(event) {
            event.preventDefault();
            if (!validateEditForm()) return;

            const categoryId = document.getElementById('editCategoryId').value;
            const name = document.getElementById('editCategoryName').value.trim();
            const description = document.getElementById('editCategoryDescription').value.trim();

            fetch(`/admin/editCategory/${categoryId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ categoryname: name, description })
            })
            .then(response => response.json().then(data => ({ ok: response.ok, status: response.status, data })))
            .then(({ ok, status, data }) => {
                if (!ok) throw new Error(data.error || `Failed to update category (Status: ${status})`);
                Swal.fire({
                    icon: 'success',
                    title: 'Category Updated',
                    text: data.message || 'Category updated successfully!',
                    timer: 1500,
                    showConfirmButton: false
                }).then(() => {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editCategoryModal'));
                    if (modal) modal.hide();
                    location.reload();
                });
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while updating the category.'
                });
            });
        }

        // Validation functions
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementById("categoryName").value.trim();
            const description = document.getElementById("categoryDescription").value.trim();
            let isValid = true;

            if (name === "") {
                displayErrorMessage("name-error", "Please enter a category name");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage("description-error", "Please enter a description");
                isValid = false;
            }

            return isValid;
        }

        function validateEditForm() {
            clearErrorMessages();
            const name = document.getElementById('editCategoryName').value.trim();
            const description = document.getElementById('editCategoryDescription').value.trim();
            let isValid = true;

            if (name === "") {
                displayErrorMessage("edit-name-error", "Please enter a category name");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("edit-name-error", "Category name should contain only alphabetic characters");
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage("edit-description-error", "Please enter a description");
                isValid = false;
            }

            return isValid;
        }

        // Other functions
        function handleEditClick(categoryId, categoryName, categoryDescription) {
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = categoryName;
            document.getElementById('editCategoryDescription').value = categoryDescription;
        }

        async function handleListedCatClick(categoryId) {
            const button = document.querySelector(`button[onclick="handleListedCatClick('${categoryId}')"]`);
            button.setAttribute('aria-busy', 'true');
            button.disabled = true;

            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'This will unlist the category, making it hidden.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, unlist it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/unlistedCategory/${categoryId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const text = await response.text();
                        console.error('Non-JSON response:', text);
                        throw new Error('Server returned non-JSON response');
                    }

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Failed to unlist category');

                    Swal.fire({
                        icon: 'success',
                        title: 'Category Unlisted',
                        text: data.message || 'Category has been unlisted successfully',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => location.reload());
                } catch (error) {
                    console.error('Error unlisting category:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'An error occurred while unlisting the category'
                    });
                } finally {
                    button.setAttribute('aria-busy', 'false');
                    button.disabled = false;
                }
            } else {
                button.setAttribute('aria-busy', 'false');
                button.disabled = false;
            }
        }

        async function handleUnlistedCatClick(categoryId) {
            const button = document.querySelector(`button[onclick="handleUnlistedCatClick('${categoryId}')"]`);
            button.setAttribute('aria-busy', 'true');
            button.disabled = true;

            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'This will list the category, making it visible.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, list it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/listedCategory/${categoryId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const text = await response.text();
                        console.error('Non-JSON response:', text);
                        throw new Error('Server returned non-JSON response');
                    }

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Failed to list category');

                    Swal.fire({
                        icon: 'success',
                        title: 'Category Listed',
                        text: data.message || 'Category has been listed successfully',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => location.reload());
                } catch (error) {
                    console.error('Error listing category:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'An error occurred while listing the category'
                    });
                } finally {
                    button.setAttribute('aria-busy', 'false');
                    button.disabled = false;
                }
            } else {
                button.setAttribute('aria-busy', 'false');
                button.disabled = false;
            }
        }

        async function handleSoftDeleteClick(categoryId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'This will mark the category as deleted. You can restore it later.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/categoryDelete/${categoryId}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Failed to soft delete category');

                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted',
                        text: data.message || 'Category has been soft deleted',
                        timer: 1500,
                        showConfirmButton: false
                    }).then(() => location.reload());
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops',
                        text: error.message || 'An error occurred while deleting the category'
                    });
                }
            }
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (errorElement) {
                errorElement.innerText = message;
                errorElement.style.display = "block";
            }
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach(element => {
                element.innerText = "";
                element.style.display = "none";
            });
        }
    </script>
    <%- include("../../views/partials/admin/footer") %>
</body>
</html>